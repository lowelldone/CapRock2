@model IEnumerable<Capstone2.Models.Customer>

@{
    ViewData["Title"] = "Customers";
}

<link rel="stylesheet" href="~/css/modern-ui.css" />

<div class="container-fluid modern-bg">
    <!-- Alerts Section -->
    @if (TempData["PaymentError"] != null)
    {
        <div class="modern-alert modern-alert-danger">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["PaymentError"]
        </div>
    }
    @if (TempData["PaymentSuccess"] != null)
    {
        <div class="modern-alert modern-alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["PaymentSuccess"]
        </div>
    }
    @if (TempData["CateringStatusError"] != null)
    {
        <div class="modern-alert modern-alert-warning">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["CateringStatusError"]
        </div>
    }
    @if (TempData["HeadWaiterAssigned"] != null)
    {
        <div class="modern-alert modern-alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["HeadWaiterAssigned"]
        </div>
    }

    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-start mb-4">
        <div class="modern-header">
            <div class="modern-header-icon">
                <i class="bi bi-people-fill"></i>
            </div>
            <div>
                <h1 class="modern-title">Customer Orders</h1>
                <p class="modern-subtitle">Track and manage all catering customer orders with real-time status updates</p>
            </div>
        </div>
        <div class="modern-action-buttons">
            <a asp-action="OrdersByDate" class="modern-action-btn btn-outline-primary">
                <i class="bi bi-calendar-day"></i>
                Daily Orders
            </a>
            <a asp-action="PastOrders" class="modern-action-btn btn-outline-success">
                <i class="bi bi-clock-history"></i>
                Past Orders
            </a>
            <a asp-action="DeletedHistory" class="modern-action-btn btn-outline-danger">
                <i class="bi bi-trash"></i>
                Deleted History
            </a>
            @* <a asp-action="Create" class="modern-action-btn btn-primary">
            <i class="bi bi-plus-lg"></i>
            Add New Customer
            </a> *@
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="modern-search-card">
        <form asp-controller="Customers" asp-action="Index" method="get" class="modern-search-form">
            <div>
                <label class="modern-form-label">Search Orders</label>
                <input type="text" name="searchString" class="modern-form-control" placeholder="Search by Order Number, Customer Name..." value="@Context.Request.Query["searchString"]" />
            </div>
            <div>
                <label class="modern-form-label">Status Filter</label>
                <select name="cateringStatus" class="modern-form-control" id="cateringStatusFilter">
                    <option value="">All Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Accepted">Accepted</option>
                    <option value="Ongoing">Ongoing</option>
                </select>
            </div>
            <div>
                <button type="submit" class="modern-btn-search w-100">
                    <i class="bi bi-search me-2"></i>Search
                </button>
            </div>
            <div>
                <a asp-action="Index" class="modern-action-btn btn-outline-secondary w-100">
                    <i class="bi bi-arrow-clockwise me-2"></i>Clear
                </a>
            </div>
        </form>
    </div>

    @{
        var remainingDict = ViewBag.RemainingBalanceByOrder as System.Collections.Generic.IDictionary<int, double>;
        var returnsDict = ViewBag.ReturnsExistByOrder as System.Collections.Generic.IDictionary<int, bool>;

        System.Func<Capstone2.Models.Customer, string> computeStatus = (item) =>
        {
            var order = item.Order;
            if (order == null) return "";
            var remaining = (remainingDict != null && remainingDict.ContainsKey(order.OrderId)) ? remainingDict[order.OrderId] : 0d;
            var hasReturns = (returnsDict != null && returnsDict.ContainsKey(order.OrderId));
            var dynamicStatus = order.Status;
            var downPaymentMet = order.AmountPaid >= (order.TotalPayment * 0.5);
            if (!downPaymentMet)
            {
                dynamicStatus = "Pending";
            }
            else if (order.Status == "Ongoing")
            {
                dynamicStatus = "Ongoing";
            }
            else if (remaining > 0 && hasReturns)
            {
                dynamicStatus = "Settling Balance";
            }
            else if (remaining > 0 && !hasReturns)
            {
                dynamicStatus = "Accepted";
            }
            return dynamicStatus;
        };

        var statusOrder = new System.Collections.Generic.List<string> { "Pending", "Accepted", "Ongoing", "Settling Balance" };
        var withStatus = Model.Where(m => m.Order != null)
        .Select(c => new { Customer = c, Status = computeStatus(c) })
        .Where(x => x.Status != "Completed")
        .ToList();
        var allOrdered = withStatus
        .Where(x => x.Status != "Completed")
        .OrderBy(x => statusOrder.IndexOf(x.Status))
        .ToList();
        var pending = allOrdered.Where(x => x.Status == "Pending").ToList();
        var accepted = allOrdered.Where(x => x.Status == "Accepted").ToList();
        var settling = allOrdered.Where(x => x.Status == "Settling Balance").ToList();
        var completed = new System.Collections.Generic.List<object>();
    }

    <!-- All Orders Table -->
    <div class="modern-status-card">
        <div class="modern-status-card-header">
            <h5 class="modern-status-card-title">
                <i class="bi bi-list-task"></i>
                All Orders Overview
            </h5>
        </div>
        <div class="table-responsive">
            <table class="modern-table table-hover align-middle mb-0">
                <thead>
                    <tr>
                        <th>Order Number</th>
                        <th>Customer Details</th>
                        <th>Contact</th>
                        <th>Order Status</th>
                        <th>Catering Status</th>
                        <th>Head Waiter</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cs in allOrdered)
                    {
                        var item = cs.Customer;
                        var order = item.Order;
                        var dynamicStatus = cs.Status;
                        <tr>
                            <td data-label="Order Number">
                                @if (order?.OrderNumber != null)
                                {
                                    <span class="modern-badge">@order.OrderNumber</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td data-label="Customer Details">
                                <div class="modern-name">@item.Name</div>
                                <div class="modern-address">@item.Address</div>
                            </td>
                            <td data-label="Contact">
                                <div class="modern-info">@item.ContactNo</div>
                            </td>
                            <td data-label="Order Status">
                                @{
                                    var downPayment = (decimal)order.TotalPayment * 0.5m;
                                    var downPaymentRemaining = downPayment - (decimal)order.AmountPaid;
                                    var balance = (decimal)order.TotalPayment - (decimal)order.AmountPaid;
                                    var isReadyToCater = downPaymentRemaining <= 0 && balance > 0;
                                }
                                @if (item.IsPaid)
                                {
                                    <span class="modern-status-badge paid">
                                        <i class="bi bi-check-circle me-1"></i>
                                        <span>Paid</span>
                                    </span>
                                }
                                else if (isReadyToCater)
                                {
                                    <span class="modern-status-badge partial-payment">
                                        <i class="bi bi-exclamation-circle me-1"></i>
                                        <span>Partial Payment</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="modern-status-badge not-paid">
                                        <i class="bi bi-x-circle me-1"></i>
                                        <span>Not Paid</span>
                                    </span>
                                }
                            </td>
                            <td data-label="Catering Status">
                                <span class="modern-status-badge @(dynamicStatus switch {
                                    "Pending" => "pending",
                                    "Accepted" => "accepted",
                                    "Ongoing" => "ongoing",
                                    "Settling Balance" => "settling",
                                    _ => "inactive"
                                })">
                                    @if (dynamicStatus == "Pending")
                                    {
                                        <i class="bi bi-clock"></i>
                                    }
                                    else if (dynamicStatus == "Accepted")
                                    {
                                        <i class="bi bi-check-circle"></i>
                                    }
                                    else if (dynamicStatus == "Ongoing")
                                    {
                                        <i class="bi bi-play-circle"></i>
                                    }
                                    else if (dynamicStatus == "Settling Balance")
                                    {
                                        <i class="bi bi-calculator"></i>
                                    }
                                    @dynamicStatus
                                </span>
                            </td>
                            <td data-label="Head Waiter">
                                @if (order?.HeadWaiter != null && order.HeadWaiter.User != null)
                                {
                                    <span class="modern-info">
                                        <i class="bi bi-person-badge me-1"></i>
                                        @($"{order.HeadWaiter.User.FirstName} {order.HeadWaiter.User.LastName}")
                                    </span>
                                }
                                else
                                {
                                    <span class="modern-info text-muted">
                                        <i class="bi bi-person-x me-1"></i>
                                        Not Assigned
                                    </span>
                                }
                            </td>
                            <td class="text-end" data-label="Actions">
                                <div class="modern-table-actions">
                                    <a asp-action="ViewOrder" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-secondary">
                                        <i class="bi bi-eye"></i>
                                        View
                                    </a>
                                    @if (order.Status == "Completed")
                                    {
                                        <a asp-action="InventoryReport" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-info">
                                            <i class="bi bi-clipboard-data"></i>
                                            Report
                                        </a>
                                    }
                                    <a asp-action="Delete" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-danger">
                                        <i class="bi bi-trash"></i>
                                        Delete
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pending Orders Table -->
    @if (pending.Any())
    {
        <div class="modern-status-card">
            <div class="modern-status-card-header">
                <h5 class="modern-status-card-title">
                    <i class="bi bi-clock text-warning"></i>
                    Pending Orders (@pending.Count)
                </h5>
            </div>
            <div class="table-responsive">
                <table class="modern-table table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th>Order Number</th>
                            <th>Customer</th>
                            <th>Contact</th>
                            <th>Address</th>
                            <th>Head Waiter</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cs in pending)
                        {
                            var item = cs.Customer;
                            var order = item.Order;
                            <tr>
                                <td><span class="modern-badge">@(order?.OrderNumber ?? "-")</span></td>
                                <td><div class="modern-name">@item.Name</div></td>
                                <td><div class="modern-info">@item.ContactNo</div></td>
                                <td><div class="modern-address">@item.Address</div></td>
                                <td>
                                    @if (order?.HeadWaiter?.User != null)
                                    {
                                        <span class="modern-info">
                                            <i class="bi bi-person-badge me-1"></i>
                                            @($"{order.HeadWaiter.User.FirstName} {order.HeadWaiter.User.LastName}")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="modern-info text-muted">
                                            <i class="bi bi-person-x me-1"></i>
                                            Not Assigned
                                        </span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="modern-table-actions">
                                        <a asp-action="ViewOrder" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-secondary">
                                            <i class="bi bi-eye"></i>
                                            View
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-danger">
                                            <i class="bi bi-trash"></i>
                                            Delete
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <!-- Accepted Orders Table -->
    @if (accepted.Any())
    {
        <div class="modern-status-card">
            <div class="modern-status-card-header">
                <h5 class="modern-status-card-title">
                    <i class="bi bi-check-circle text-info"></i>
                    Accepted Orders (@accepted.Count)
                </h5>
            </div>
            <div class="table-responsive">
                <table class="modern-table table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th>Order Number</th>
                            <th>Customer</th>
                            <th>Contact</th>
                            <th>Address</th>
                            <th>Head Waiter</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cs in accepted)
                        {
                            var item = cs.Customer;
                            var order = item.Order;
                            <tr>
                                <td><span class="modern-badge">@(order?.OrderNumber ?? "-")</span></td>
                                <td><div class="modern-name">@item.Name</div></td>
                                <td><div class="modern-info">@item.ContactNo</div></td>
                                <td><div class="modern-address">@item.Address</div></td>
                                <td>
                                    @if (order?.HeadWaiter?.User != null)
                                    {
                                        <span class="modern-info">
                                            <i class="bi bi-person-badge me-1"></i>
                                            @($"{order.HeadWaiter.User.FirstName} {order.HeadWaiter.User.LastName}")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="modern-info text-muted">
                                            <i class="bi bi-person-x me-1"></i>
                                            Not Assigned
                                        </span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="modern-table-actions">
                                        <a asp-action="ViewOrder" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-secondary">
                                            <i class="bi bi-eye"></i>
                                            View
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-danger">
                                            <i class="bi bi-trash"></i>
                                            Delete
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <!-- Settling Balance Orders Table -->
    @if (settling.Any())
    {
        <div class="modern-status-card">
            <div class="modern-status-card-header">
                <h5 class="modern-status-card-title">
                    <i class="bi bi-calculator text-danger"></i>
                    Settling Balance Orders (@settling.Count)
                </h5>
            </div>
            <div class="table-responsive">
                <table class="modern-table table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th>Order Number</th>
                            <th>Customer</th>
                            <th>Contact</th>
                            <th>Address</th>
                            <th>Head Waiter</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cs in settling)
                        {
                            var item = cs.Customer;
                            var order = item.Order;
                            <tr>
                                <td><span class="modern-badge">@(order?.OrderNumber ?? "-")</span></td>
                                <td><div class="modern-name">@item.Name</div></td>
                                <td><div class="modern-info">@item.ContactNo</div></td>
                                <td><div class="modern-address">@item.Address</div></td>
                                <td>
                                    @if (order?.HeadWaiter?.User != null)
                                    {
                                        <span class="modern-info">
                                            <i class="bi bi-person-badge me-1"></i>
                                            @($"{order.HeadWaiter.User.FirstName} {order.HeadWaiter.User.LastName}")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="modern-info text-muted">
                                            <i class="bi bi-person-x me-1"></i>
                                            Not Assigned
                                        </span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="modern-table-actions">
                                        <a asp-action="ViewOrder" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-secondary">
                                            <i class="bi bi-eye"></i>
                                            View
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-danger">
                                            <i class="bi bi-trash"></i>
                                            Delete
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <!-- Ongoing Orders Table -->
    @{
        var ongoing = allOrdered.Where(x => x.Status == "Ongoing").ToList();
    }
    @if (ongoing.Any())
    {
        <div class="modern-status-card">
            <div class="modern-status-card-header">
                <h5 class="modern-status-card-title">
                    <i class="bi bi-play-circle text-success"></i>
                    Ongoing Orders (@ongoing.Count)
                </h5>
            </div>
            <div class="table-responsive">
                <table class="modern-table table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th>Order Number</th>
                            <th>Customer</th>
                            <th>Contact</th>
                            <th>Address</th>
                            <th>Head Waiter</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cs in ongoing)
                        {
                            var item = cs.Customer;
                            var order = item.Order;
                            <tr>
                                <td><span class="modern-badge">@(order?.OrderNumber ?? "-")</span></td>
                                <td><div class="modern-name">@item.Name</div></td>
                                <td><div class="modern-info">@item.ContactNo</div></td>
                                <td><div class="modern-address">@item.Address</div></td>
                                <td>
                                    @if (order?.HeadWaiter?.User != null)
                                    {
                                        <span class="modern-info">
                                            <i class="bi bi-person-badge me-1"></i>
                                            @($"{order.HeadWaiter.User.FirstName} {order.HeadWaiter.User.LastName}")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="modern-info text-muted">
                                            <i class="bi bi-person-x me-1"></i>
                                            Not Assigned
                                        </span>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="modern-table-actions">
                                        <a asp-action="ViewOrder" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-secondary">
                                            <i class="bi bi-eye"></i>
                                            View
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.CustomerID" class="modern-table-action-btn btn-outline-danger">
                                            <i class="bi bi-trash"></i>
                                            Delete
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<script>
    $(function () {
        // Set selected value for catering status filter based on URL parameters
        function setSelectedCateringStatus() {
            const urlParams = new URLSearchParams(window.location.search);
            const cateringStatus = urlParams.get('cateringStatus');
            if (cateringStatus) {
                $('#cateringStatusFilter').val(cateringStatus);
            }
        }

        // Initialize the filter on page load
        setSelectedCateringStatus();

        // Auto-submit form when catering status changes
        $('#cateringStatusFilter').on('change', function () {
            $(this).closest('form').submit();
        });

        // Add loading animation to status cards
        $('.modern-status-card').on('click', function () {
            $(this).addClass('modern-loading');
            setTimeout(() => {
                $(this).removeClass('modern-loading');
            }, 1000);
        });

        // Smooth scroll to top when clicking action buttons
        $('.modern-action-btn, .modern-table-action-btn').on('click', function () {
            if (this.href && this.href.includes('#')) {
                $('html, body').animate({
                    scrollTop: 0
                }, 500);
            }
        });

        // Add hover effects to table rows
        $('.modern-table tbody tr').hover(
            function () {
                $(this).addClass('table-hover');
            },
            function () {
                $(this).removeClass('table-hover');
            }
        );

        // Enhanced mobile table responsiveness
        function handleTableScroll() {
            $('.table-responsive').each(function () {
                const $container = $(this);
                const container = this;

                function updateScrollIndicators() {
                    const scrollLeft = container.scrollLeft;
                    const maxScrollLeft = container.scrollWidth - container.clientWidth;

                    $container.removeClass('scroll-left scroll-right');

                    if (scrollLeft > 0) {
                        $container.addClass('scroll-left');
                    }
                    if (scrollLeft < maxScrollLeft) {
                        $container.addClass('scroll-right');
                    }
                }

                // Initial check
                updateScrollIndicators();

                // Update on scroll
                $(container).on('scroll', updateScrollIndicators);

                // Update on resize
                $(window).on('resize', updateScrollIndicators);
            });
        }

        // Initialize table scroll handling
        handleTableScroll();

        // Touch-friendly table interactions
        if ('ontouchstart' in window) {
            $('.modern-table tbody tr').on('touchstart', function (e) {
                $(this).addClass('touch-active');
            });

            $('.modern-table tbody tr').on('touchend', function (e) {
                const $row = $(this);
                setTimeout(() => {
                    $row.removeClass('touch-active');
                }, 150);
            });
        }

        // Responsive table card layout for very small screens
        function checkTableLayout() {
            if (window.innerWidth <= 576) {
                $('.modern-table').addClass('mobile-card-layout');
            } else {
                $('.modern-table').removeClass('mobile-card-layout');
            }
        }

        // Check on load and resize
        checkTableLayout();
        $(window).on('resize', checkTableLayout);

        // Improved form validation for mobile
        $('.modern-search-form').on('submit', function (e) {
            const searchString = $('input[name="searchString"]').val().trim();
            const cateringStatus = $('select[name="cateringStatus"]').val();

            // Show loading state
            $(this).find('button[type="submit"]').prop('disabled', true).html('<i class="bi bi-hourglass-split me-2"></i>Searching...');
        });

        // Auto-focus search input on mobile when page loads
        if (window.innerWidth <= 768) {
            setTimeout(() => {
                $('input[name="searchString"]').focus();
            }, 500);
        }

        // Smooth scrolling for mobile navigation
        $('a[href^="#"]').on('click', function (e) {
            e.preventDefault();
            const target = $(this.getAttribute('href'));
            if (target.length) {
                $('html, body').animate({
                    scrollTop: target.offset().top - 80
                }, 500);
            }
        });

        // Add swipe gestures for table navigation on mobile
        let startX = 0;
        let startY = 0;

        $('.table-responsive').on('touchstart', function (e) {
            startX = e.originalEvent.touches[0].clientX;
            startY = e.originalEvent.touches[0].clientY;
        });

        $('.table-responsive').on('touchend', function (e) {
            if (!startX || !startY) return;

            const endX = e.originalEvent.changedTouches[0].clientX;
            const endY = e.originalEvent.changedTouches[0].clientY;

            const diffX = startX - endX;
            const diffY = startY - endY;

            // Only handle horizontal swipes
            if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
                const container = this;
                const scrollAmount = 200;

                if (diffX > 0) {
                    // Swipe left - scroll right
                    $(container).animate({ scrollLeft: container.scrollLeft + scrollAmount }, 300);
                } else {
                    // Swipe right - scroll left
                    $(container).animate({ scrollLeft: container.scrollLeft - scrollAmount }, 300);
                }
            }

            startX = 0;
            startY = 0;
        });
    });
</script>
