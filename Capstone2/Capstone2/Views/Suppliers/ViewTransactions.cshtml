@model IEnumerable<Capstone2.Models.ViewTransaction>

<div class="container-fluid mt-4 px-4">
    <style>
        /* Ensure long content is scrollable within the modal */
        #manualPoModal .modal-body {
            max-height: calc(100vh - 220px);
            overflow-y: auto;
        }

        #manualPoModal .table-responsive {
            max-height: 60vh;
            overflow-y: auto;
        }
        /* Remove outer modal scroll; keep scrolling inside modal body only */
        #manualPoModal.modal {
            overflow-y: hidden !important;
        }
    </style>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="fw-bold mb-0">Supplier Transactions</h2>
            <div class="text-muted"><strong>@ViewBag.SupplierName</strong></div>
        </div>
        <div class="d-flex gap-2">
            <button type="button" id="toggleManualPo" class="btn btn-primary"><i class="bi bi-cart-plus"></i> Create PO(s)</button>
            <a asp-action="Index" class="btn btn-outline-secondary"><i class="bi bi-arrow-left"></i> Back</a>
        </div>
    </div>

    <div class="modal fade" id="manualPoModal" tabindex="-1" aria-labelledby="manualPoLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <form asp-action="CreatePurchaseOrderBatch" method="post" id="manualPoForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="supplierId" value="@ViewBag.SupplierId" />
                    <div class="modal-header">
                        <h5 class="modal-title" id="manualPoLabel"><i class="bi bi-cart-plus"></i> Create Purchase Order(s)</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row g-3 align-items-end">
                            <div class="col-md-4">
                                <label class="form-label">Scheduled Delivery</label>
                                <input class="form-control" type="date" name="scheduledDelivery" required />
                            </div>
                        </div>
                        <div class="table-responsive mt-3">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Material</th>
                                        <th style="width: 200px;">Quantity</th>
                                    </tr>
                                </thead>
                                <tbody id="manualPoTbody"></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal"><i class="bi bi-x-lg"></i> Cancel</button>
                        <button class="btn btn-primary" type="submit"><i class="bi bi-cart-plus"></i> Create PO(s)</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ordered Date</th>
                        <th>Expected Date</th>
                        <th>Status</th>
                        <th class="text-end">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.OrderDate.ToString("MM/dd/yyyy")</td>
                            <td>@(item.ExpectedDate.HasValue ? item.ExpectedDate.Value.ToString("MM/dd/yyyy") : "-")</td>
                            <td>@item.Status</td>
                            <td class="text-end">
                                <div class="btn-group" role="group">
                                    <a asp-action="ManageTransactions" asp-route-id="@ViewBag.SupplierId" asp-route-view="po" asp-route-vtId="@item.ViewTransactionId" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-box"></i> View Purchase Order
                                    </a>
                                    <a asp-action="ManageTransactions" asp-route-id="@ViewBag.SupplierId" asp-route-view="tx" asp-route-vtId="@item.ViewTransactionId" class="btn btn-primary btn-sm">
                                        <i class="bi bi-receipt"></i> View Transaction
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    (function () {
        const supplierId = @ViewBag.SupplierId;
        const toggleBtn = document.getElementById('toggleManualPo');
        const modalEl = document.getElementById('manualPoModal');
        const tbody = document.getElementById('manualPoTbody');
        let loaded = false;

        async function loadMaterials() {
            const res = await fetch(`/Suppliers/Prices/${supplierId}`);
            if (!res.ok) return;
            const data = await res.json();
            const materials = data.materials || data.Materials || [];
            tbody.innerHTML = '';
            materials.forEach(m => {
                const id = m.materialId ?? m.MaterialId;
                const name = m.name ?? m.Name;
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${name}</td>
                                    <td>
                                        <input type="hidden" name="materialIds" value="${id}" />
                                        <input class="form-control qty-input" type="number" name="quantities" min="0" step="1" value="0" />
                                    </td>`;
                tbody.appendChild(tr);
            });
        }

        if (toggleBtn && modalEl) {
            const manualPoModal = new bootstrap.Modal(modalEl);
            toggleBtn.addEventListener('click', async function () {
                if (!loaded) {
                    await loadMaterials();
                    loaded = true;
                }
                manualPoModal.show();
            });
        }

        // Quantity input UX: clear 0 on focus, restore 0 on blur if empty
        tbody.addEventListener('focusin', function (e) {
            const input = e.target.closest('input.qty-input');
            if (!input) return;
            if (input.value === '0' || input.value === 0) {
                input.value = '';
            }
        });
        tbody.addEventListener('focusout', function (e) {
            const input = e.target.closest('input.qty-input');
            if (!input) return;
            if (input.value === '' || isNaN(Number(input.value))) {
                input.value = '0';
            }
        });
    })();
</script>
