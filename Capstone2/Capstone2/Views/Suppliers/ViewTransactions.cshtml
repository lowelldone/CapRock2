@model IEnumerable<Capstone2.Models.ViewTransaction>

<div class="container-fluid mt-4 px-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="fw-bold mb-0">Supplier Transactions</h2>
            <div class="text-muted"><strong>@ViewBag.SupplierName</strong></div>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Index" class="btn btn-outline-secondary"><i class="bi bi-arrow-left"></i> Back</a>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <form asp-action="CreatePurchaseOrderBatch" method="post" class="mb-3" id="poBatchForm">
                @Html.AntiForgeryToken()
                <input type="hidden" name="supplierId" value="@ViewBag.SupplierId" />
                <div class="row g-3 align-items-end" id="poItemsContainer">
                    <div class="col-12 col-md-6 col-lg-5">
                        <label class="form-label">Material</label>
                        <select class="form-select po-material" name="materialIds"></select>
                    </div>
                    <div class="col-8 col-md-4 col-lg-3">
                        <label class="form-label">Quantity</label>
                        <input class="form-control po-quantity" type="number" name="quantities" min="1" value="1" />
                    </div>
                    <div class="col-4 col-md-2 col-lg-2 d-grid">
                        <button class="btn btn-outline-danger remove-row d-none" type="button"><i class="bi bi-x-lg"></i></button>
                    </div>
                </div>
                <div class="row g-3 mt-2">
                    <div class="col-md-4">
                        <label class="form-label">Scheduled Delivery</label>
                        <input class="form-control" type="date" name="scheduledDelivery" />
                    </div>
                    <div class="col-md-8 d-flex justify-content-end align-items-end gap-2">
                        <button class="btn btn-outline-secondary" type="button" id="addItemRow"><i class="bi bi-plus"></i> Add another item</button>
                        <button class="btn btn-primary" type="submit"><i class="bi bi-cart-plus"></i> Create PO(s)</button>
                    </div>
                </div>
            </form>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ordered Date</th>
                        <th>Expected Date</th>
                        <th>Status</th>
                        <th class="text-end">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.OrderDate.ToString("MM/dd/yyyy")</td>
                            <td>@(item.ExpectedDate.HasValue ? item.ExpectedDate.Value.ToString("MM/dd/yyyy") : "-")</td>
                            <td>@item.Status</td>
                            <td class="text-end">
                                <div class="btn-group" role="group">
                                    <a asp-action="ManageTransactions" asp-route-id="@ViewBag.SupplierId" asp-route-view="po" asp-route-vtId="@item.ViewTransactionId" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-box"></i> View Purchase Order
                                    </a>
                                    <a asp-action="ManageTransactions" asp-route-id="@ViewBag.SupplierId" asp-route-view="tx" asp-route-vtId="@item.ViewTransactionId" class="btn btn-primary btn-sm">
                                        <i class="bi bi-receipt"></i> View Transaction
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    (async function () {
        const supplierId = @ViewBag.SupplierId;
        const container = document.getElementById('poItemsContainer');
        const addBtn = document.getElementById('addItemRow');
        let materialsData = [];

        async function loadMaterials() {
            const res = await fetch(`/Suppliers/Prices/${supplierId}`);
            if (!res.ok) return;
            const data = await res.json();
            materialsData = data.materials || data.Materials || [];
            // Populate the first row
            const firstSelect = container.querySelector('select.po-material');
            populateSelect(firstSelect);
        }

        function populateSelect(selectEl) {
            if (!selectEl) return;
            selectEl.innerHTML = '';
            materialsData.forEach(m => {
                const opt = document.createElement('option');
                opt.value = m.materialId ?? m.MaterialId;
                opt.textContent = m.name ?? m.Name;
                selectEl.appendChild(opt);
            });
        }

        function addRow() {
            const row = document.createElement('div');
            row.className = 'row g-3 align-items-end mt-2';
            row.innerHTML = `
                    <div class="col-12 col-md-6 col-lg-5">
                        <select class="form-select po-material" name="materialIds"></select>
                    </div>
                    <div class="col-8 col-md-4 col-lg-3">
                        <input class="form-control po-quantity" type="number" name="quantities" min="1" value="1" />
                    </div>
                    <div class="col-4 col-md-2 col-lg-2 d-grid">
                        <button class="btn btn-outline-danger remove-row" type="button"><i class="bi bi-x-lg"></i></button>
                    </div>`;
            container.appendChild(row);
            populateSelect(row.querySelector('select.po-material'));
        }

        container.addEventListener('click', (e) => {
            if (e.target.closest('.remove-row')) {
                const row = e.target.closest('.row');
                if (row && container.children.length > 1) {
                    row.remove();
                }
            }
        });

        if (addBtn) addBtn.addEventListener('click', addRow);
        await loadMaterials();
    })();
</script>
