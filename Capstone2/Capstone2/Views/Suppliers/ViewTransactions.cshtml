@model IEnumerable<Capstone2.Models.ViewTransaction>

<link rel="stylesheet" href="~/css/modern-ui.css" />

<div class="container-fluid modern-bg modern-compact">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-start mb-4">
        <div class="modern-header">
            <div class="modern-header-icon">
                <i class="bi bi-receipt"></i>
            </div>
            <div>
                <h1 class="modern-title">Supplier Transactions</h1>
                <p class="modern-subtitle"><strong>@ViewBag.SupplierName</strong></p>
            </div>
        </div>
        <div class="modern-action-buttons">
            <button type="button" id="toggleManualPo" class="modern-action-btn btn-primary">
                <i class="bi bi-cart-plus"></i>Create PO(s)
            </button>
            <a asp-action="TransactionHistory" asp-route-id="@ViewBag.SupplierId" class="modern-action-btn btn-outline-info">
                <i class="bi bi-clock-history"></i>Transaction History
            </a>
            <a asp-action="Index" class="modern-action-btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i>Back
            </a>
        </div>
    </div>

    <!-- Create PO Modal -->
    <div class="modal fade" id="manualPoModal" tabindex="-1" aria-labelledby="manualPoLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <form asp-action="CreatePurchaseOrderBatch" method="post" id="manualPoForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="supplierId" value="@ViewBag.SupplierId" />
                    <div class="modal-header">
                        <h5 class="modal-title" id="manualPoLabel">
                            <i class="bi bi-cart-plus"></i> Create Purchase Order(s)
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                       <div class="row g-3 align-items-end"></div>
                        <div class="table-responsive mt-3">
                            <table class="modern-table">
                                <thead>
                                    <tr>
                                        <th>Material</th>
                                        <th style="width: 200px;">Quantity</th>
                                    </tr>
                                </thead>
                                <tbody id="manualPoTbody"></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="modern-action-btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="bi bi-x-lg"></i>Cancel
                        </button>
                        <button class="modern-action-btn btn-primary" type="submit">
                            <i class="bi bi-cart-plus"></i>Create PO(s)
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="modern-status-card">
        <div class="modern-status-card-header">
            <h5 class="modern-status-card-title">
                <i class="bi bi-list-ul"></i>
                Supplier Orders
            </h5>
        </div>
        <div class="modern-card-body">
            <div class="table-responsive">
                <table class="modern-table">
                    <thead>
                        <tr>
                            <th>PO Number</th>
                            <th>Ordered Date</th>
                            <th>Status</th>
                            <th class="text-end">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    <div class="modern-name">@(string.IsNullOrWhiteSpace(item.TransactionOrderNumber) ? "-" : item.TransactionOrderNumber)</div>
                                </td>
                                <td>
                                    <div class="modern-info">@item.OrderDate.ToString("MM/dd/yyyy")</div>
                                </td>
                                <td>
                                    <span class="modern-status-badge @(item.Status.ToLower())">
                                        @item.Status
                                    </span>
                                </td>
                                <td class="text-end">
                                    <div class="modern-table-actions">
                                        <a asp-action="ManageTransactions" asp-route-id="@ViewBag.SupplierId" asp-route-view="po" asp-route-vtId="@item.ViewTransactionId" class="modern-table-action-btn btn-primary">
                                            <i class="bi bi-box"></i>View PO
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        const supplierId = @ViewBag.SupplierId;
        const lowThreshold = @((int)(ViewBag.LowStockThreshold ?? 1000));
        const toggleBtn = document.getElementById('toggleManualPo');
        const modalEl = document.getElementById('manualPoModal');
        const tbody = document.getElementById('manualPoTbody');
        let loaded = false;

        async function loadMaterials() {
            const res = await fetch(`/Suppliers/Materials/${supplierId}`);
            if (!res.ok) return;
            const data = await res.json();
            const materials = data.materials || data.Materials || [];
            tbody.innerHTML = '';
            materials.forEach(m => {
                const id = m.materialId ?? m.MaterialId;
                const name = m.name ?? m.Name;
                const qty = m.quantity ?? m.Quantity ?? 0;
                const isLow = qty <= lowThreshold;
                const note = isLow ? '<span class="modern-status-badge pending ms-2"><i class="bi bi-exclamation-triangle"></i> Low Stock</span>' : '';
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>
                                        <div class="modern-name">${name}</div>
                                            ${note}
                                    </td>
                                    <td>
                                        <input type="hidden" name="materialIds" value="${id}" />
                                        <input class="modern-form-control qty-input" type="number" name="quantities" min="0" step="1" value="0" />
                                    </td>`;
                tbody.appendChild(tr);
            });
        }

        if (toggleBtn && modalEl) {
            const manualPoModal = new bootstrap.Modal(modalEl);
            toggleBtn.addEventListener('click', async function () {
                if (!loaded) {
                    await loadMaterials();
                    loaded = true;
                }
                manualPoModal.show();
            });
        }

        // Quantity input UX: clear 0 on focus, restore 0 on blur if empty
        tbody.addEventListener('focusin', function (e) {
            const input = e.target.closest('input.qty-input');
            if (!input) return;
            if (input.value === '0' || input.value === 0) {
                input.value = '';
            }
        });
        tbody.addEventListener('focusout', function (e) {
            const input = e.target.closest('input.qty-input');
            if (!input) return;
            if (input.value === '' || isNaN(Number(input.value))) {
                input.value = '0';
            }
        });
    })();
</script>
