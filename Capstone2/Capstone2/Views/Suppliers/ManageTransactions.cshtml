@{
    ViewData["Title"] = "Supplier Transactions";
    var supplierId = (int)ViewBag.SupplierId;
    int? viewTransactionId = ViewBag.ViewTransactionId as int?;
}

<link rel="stylesheet" href="~/css/modern-ui.css" />

<div class="container-fluid modern-bg">
    <!-- Alerts Section -->
    @if (TempData["SupplierSuccess"] != null)
    {
        <div id="tx-success-toast" class="modern-alert modern-alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["SupplierSuccess"]
        </div>
        <script>
            setTimeout(function () {
                var toast = document.getElementById('tx-success-toast');
                if (toast) {
                    var bsAlert = bootstrap.Alert.getOrCreateInstance(toast);
                    bsAlert.close();
                }
            }, 3000);
        </script>
    }
    @if (TempData["SupplierError"] != null)
    {
        <div id="tx-error-toast" class="modern-alert modern-alert-danger">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["SupplierError"]
        </div>
    }

    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-start mb-4">
        <div class="modern-header">
            <div class="modern-header-icon">
                <i class="bi bi-receipt"></i>
            </div>
            <div>
                <h1 class="modern-title">Supplier Transactions</h1>
                <p class="modern-subtitle">Manage purchase orders and transactions</p>
            </div>
        </div>
        <div class="modern-action-buttons">
            <a asp-action="ViewTransactions" asp-route-id="@supplierId" class="modern-action-btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i>Back
            </a>
        </div>
    </div>

    <form id="af-form" method="post" style="display:none;">@Html.AntiForgeryToken()</form>

    <!-- Purchase Orders Section -->
    <div class="row">
        <div class="col-lg-12" style="display:@(ViewBag.ViewMode == "po" ? "block" : "none")">
            <div class="modern-status-card">
                <div class="modern-status-card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="modern-status-card-title">
                            <i class="bi bi-box"></i>Purchase Orders
                        </h5>
                        <button type="button" id="btnReceiveAll" class="modern-action-btn btn-success">
                            <i class="bi bi-check2-all"></i>Receive All
                        </button>
                    </div>
                </div>
                <div class="modern-card-body">
                    <form asp-action="ReceiveAllPurchaseOrders" method="post" id="batchReceiveForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="supplierId" value="@supplierId" />
                        <div class="table-responsive">
                            <table class="modern-table" id="poTable">
                                <thead>
                                    <tr>
                                        <th>Material</th>
                                        <th>Qty</th>
                                        <th>Unit Price</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Transactions Section -->
        <div class="col-lg-12" style="display:@(ViewBag.ViewMode == "tx" ? "block" : "none")">
            <div class="modern-status-card">
                <div class="modern-status-card-header">
                    <h5 class="modern-status-card-title">
                        <i class="bi bi-list-ul"></i>Transactions
                    </h5>
                </div>
                <div class="modern-card-body">
                    <div class="table-responsive">
                        <table class="modern-table" id="txTable">
                            <thead>
                                <tr>
                                    <th>Material</th>
                                    <th>Qty</th>
                                    <th>Received</th>
                                    <th>Unit Price</th>
                                    <th>Total Payment</th>
                                    <th>Ordered</th>
                                    <th>Expected</th>
                                    <th>Delivered</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        const supplierId = @supplierId;
        const viewTransactionId = @(viewTransactionId.HasValue ? viewTransactionId.Value.ToString() : "null");
        const poTableBody = document.querySelector('#poTable tbody');
        const txTableBody = document.querySelector('#txTable tbody');
        const afTokenEl = document.querySelector('#af-form input[name="__RequestVerificationToken"]');
        const afToken = afTokenEl ? afTokenEl.value : '';

        async function loadPOs() {
            const res = await fetch(`/Suppliers/PurchaseOrders/${supplierId}${viewTransactionId ? `?vtId=${viewTransactionId}` : ''}`);
            if (!res.ok) return;
            const data = await res.json();
            poTableBody.innerHTML = '';
            data.purchaseOrders.forEach(po => {
                const tr = document.createElement('tr');
                const rec = po.receivedQuantity ?? 0;
                const total = (rec > 0 ? rec : 0) * Number(po.unitPrice);
                tr.innerHTML = `<td>
                                        <div class="modern-name">${po.materialName}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${po.quantity}</div>
                                    </td>
                                    <td>
                                        <div class="modern-name">₱${Number(po.unitPrice).toFixed(2)}</div>
                                    </td>
                                    <td>
                                        <span class="modern-status-badge ${po.status.toLowerCase()}">${po.status}</span>
                                    </td>
                                    <td>
                                        ${po.status === 'Ordered' ?
                        `<form class="inline-receive-form" data-action="/Suppliers/ReceivePurchaseOrder">
                                                <input type="hidden" name="__RequestVerificationToken" value="${afToken}" />
                                                <input type="hidden" name="purchaseOrderId" value="${po.purchaseOrderId}" />
                                                <input type="number" name="deliveredQuantity" min="1" class="modern-form-control d-inline-block row-delivered-qty" data-po-id="${po.purchaseOrderId}" style="width:100px" value="${po.quantity}" oninput="document.getElementById('batchqty-${po.purchaseOrderId}').value = this.value" />
                                                <button type="button" class="modern-action-btn btn-success ms-1 btn-inline-receive">
                                                    <i class="bi bi-box-arrow-in-down"></i>Receive
                                                </button>
                                            </form>` : ''}
                                        ${po.status === 'Ordered' ?
                        `<input type="hidden" name="purchaseOrderIds" form="batchReceiveForm" value="${po.purchaseOrderId}" />
                                             <input type="hidden" id="batchqty-${po.purchaseOrderId}" name="deliveredQuantities" form="batchReceiveForm" value="${po.quantity}" />` : ''}
                                    </td>`;
                poTableBody.appendChild(tr);
            });
        }

        async function loadTx() {
            const res = await fetch(`/Suppliers/Transactions/${supplierId}${viewTransactionId ? `?vtId=${viewTransactionId}` : ''}`);
            if (!res.ok) return;
            const data = await res.json();
            txTableBody.innerHTML = '';
            data.transactions.forEach(tx => {
                const tr = document.createElement('tr');
                const tRec = tx.receivedQuantity ?? 0;
                const tTotal = tRec * Number(tx.unitPrice);
                tr.innerHTML = `<td>
                                        <div class="modern-name">${tx.materialName}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${tx.quantity}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${tRec}</div>
                                    </td>
                                    <td>
                                        <div class="modern-name">₱${Number(tx.unitPrice).toFixed(2)}</div>
                                    </td>
                                    <td>
                                        <div class="modern-name">₱${tTotal.toFixed(2)}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${new Date(tx.orderDate).toLocaleDateString()}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${tx.expectedDeliveryDate ? new Date(tx.expectedDeliveryDate).toLocaleDateString() : '-'}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${tx.deliveredDate ? new Date(tx.deliveredDate).toLocaleDateString() : '-'}</div>
                                    </td>
                                    <td>
                                        <span class="modern-status-badge ${tx.status.toLowerCase()}">${tx.status}</span>
                                    </td>`;
                txTableBody.appendChild(tr);
            });
        }

        Promise.all([loadPOs(), loadTx()]);

        // Inline receive via AJAX
        document.addEventListener('click', async function (e) {
            const btn = e.target.closest('.btn-inline-receive');
            if (!btn) return;
            const form = btn.closest('.inline-receive-form');
            if (!form) return;
            const action = form.getAttribute('data-action');
            const fd = new FormData(form);
            const res = await fetch(action, {
                method: 'POST',
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                body: fd
            });
            if (res.ok) {
                await loadPOs();
                await loadTx();
            }
        });

        // Batch receive via AJAX
        document.getElementById('btnReceiveAll').addEventListener('click', async function () {
            const form = document.getElementById('batchReceiveForm');
            const fd = new FormData(form);
            const res = await fetch(form.getAttribute('action') || '/Suppliers/ReceiveAllPurchaseOrders', {
                method: 'POST',
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                body: fd
            });
            if (res.ok) {
                await loadPOs();
                await loadTx();
            }
        });
    })();
</script>


