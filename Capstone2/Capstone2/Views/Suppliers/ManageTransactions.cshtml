@{
    ViewData["Title"] = "Supplier Transactions";
    var supplierId = (int)ViewBag.SupplierId;
    int? viewTransactionId = ViewBag.ViewTransactionId as int?;
}

<link rel="stylesheet" href="~/css/modern-ui.css" />

<div class="container-fluid modern-bg">
    <!-- Alerts Section -->
    @if (TempData["SupplierSuccess"] != null)
    {
        <div id="tx-success-toast" class="modern-alert modern-alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["SupplierSuccess"]
        </div>
        <script>
            setTimeout(function () {
                var toast = document.getElementById('tx-success-toast');
                if (toast) {
                    var bsAlert = bootstrap.Alert.getOrCreateInstance(toast);
                    bsAlert.close();
                }
            }, 3000);
        </script>
    }
    @if (TempData["SupplierError"] != null)
    {
        <div id="tx-error-toast" class="modern-alert modern-alert-danger">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["SupplierError"]
        </div>
    }

    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-start mb-4">
        <div class="modern-header">
            <div class="modern-header-icon">
                <i class="bi bi-receipt"></i>
            </div>
            <div>
                <h1 class="modern-title">Supplier Transactions</h1>
                <p class="modern-subtitle">Manage purchase orders and transactions</p>
            </div>
        </div>
        <div class="modern-action-buttons">
            @{
                bool isReadOnly = ViewBag.IsReadOnly as bool? ?? false;
                string returnUrl = ViewBag.ReturnUrl as string ?? Url.Action("ViewTransactions", new { id = supplierId })!;
             }
             <a href="@returnUrl" class="modern-action-btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i>Back
            </a>
        </div>
    </div>

    <form id="af-form" method="post" style="display:none;">@Html.AntiForgeryToken()</form>

    <!-- Purchase Orders Section -->
    <div class="row">
        <div class="col-lg-12" style="display:@(ViewBag.ViewMode == "po" ? "block" : "none")">
            <div class="modern-status-card">
                <div class="modern-status-card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="modern-status-card-title">
                            <i class="bi bi-box"></i>Purchase Orders
                        </h5>
                        @{
                            bool isReadOnlyHeader = ViewBag.IsReadOnly as bool? ?? false;
                            
                         }
                        @if (!isReadOnlyHeader)
                        {
                            <button type="button" id="btnReceiveAll" class="modern-action-btn btn-outline-success">
                                <i class="bi bi-check2-all"></i>Receive All
                            </button>
                        }
                    </div>
                </div>
                <div class="modern-card-body">
                    <form asp-action="ReceiveAllPurchaseOrders" method="post" id="batchReceiveForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="supplierId" value="@supplierId" />
                        <div class="table-responsive">
                            <table class="modern-table" id="poTable">
                                <thead>
                                    <tr>
                                        <th>Material</th>
                                        <th>Qty</th>
                                        <th>Received</th>
                                        <th>Ordered</th>
                                        <th>Delivered</th>
                                        <th>Status</th>
                                        @{
                                            bool isReadOnlyHeader2 = ViewBag.IsReadOnly as bool? ?? false;
                                         }
                                         @if (!isReadOnlyHeader2)
                                         {
                                            <th>Actions</th>
                                         }
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        const supplierId = @supplierId;
        const viewTransactionId = @(viewTransactionId.HasValue ? viewTransactionId.Value.ToString() : "null");
        const poTableBody = document.querySelector('#poTable tbody');
        const isReadOnly = @(((ViewBag.IsReadOnly as bool?) ?? false).ToString().ToLower());
        const afTokenEl = document.querySelector('#af-form input[name="__RequestVerificationToken"]');
        const afToken = afTokenEl ? afTokenEl.value : '';

        async function loadPOs() {
            const res = await fetch(`/Suppliers/PurchaseOrders/${supplierId}${viewTransactionId ? `?vtId=${viewTransactionId}` : ''}`);
            if (!res.ok) return;
            const data = await res.json();
            poTableBody.innerHTML = '';
            data.purchaseOrders.forEach(po => {
                const tr = document.createElement('tr');
                const rec = po.receivedQuantity ?? 0;
                let actionsCol = '';
                if (!isReadOnly && po.status === 'Ordered') {
                    actionsCol = `<td>
                        <form class="inline-receive-form" data-action="/Suppliers/ReceivePurchaseOrder">
                            <input type="hidden" name="__RequestVerificationToken" value="${afToken}" />
                            <input type="hidden" name="purchaseOrderId" value="${po.purchaseOrderId}" />
                            <input type="number" name="deliveredQuantity" min="1" step="1" inputmode="numeric" class="modern-form-control d-inline-block row-delivered-qty" data-po-id="${po.purchaseOrderId}" style="width:90px" value="${po.quantity}" oninput="document.getElementById('batchqty-${po.purchaseOrderId}').value = this.value" />
                            <button type="button" class="modern-table-action-btn btn-outline-success ms-1 btn-inline-receive">
                                <i class="bi bi-box-arrow-in-down"></i>Receive
                            </button>
                        </form>
                        <input type="hidden" name="purchaseOrderIds" form="batchReceiveForm" value="${po.purchaseOrderId}" />
                        <input type="hidden" id="batchqty-${po.purchaseOrderId}" name="deliveredQuantities" form="batchReceiveForm" value="${po.quantity}" />
                    </td>`;
                }
                tr.innerHTML = `<td>
                                        <div class="modern-name">${po.materialName}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${po.quantity}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${rec}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${new Date(po.createdAt).toLocaleDateString()}</div>
                                    </td>
                                    <td>
                                        <div class="modern-info">${po.deliveredDate ? new Date(po.deliveredDate).toLocaleDateString() : '-'}</div>
                                    </td>
                                    <td>
                                        <span class="modern-status-badge ${po.status.toLowerCase()}">${po.status}</span>
                                    </td>
                                    ${actionsCol}`;
                poTableBody.appendChild(tr);
            });
        }

        Promise.all([loadPOs()]);

        // Inline receive via AJAX
        document.addEventListener('click', async function (e) {
            const btn = e.target.closest('.btn-inline-receive');
            if (!btn) return;
            const form = btn.closest('.inline-receive-form');
            if (!form) return;
            // Sanitize integer only
            const qtyInput = form.querySelector('input[name="deliveredQuantity"]');
            if (qtyInput) {
                const parsed = parseInt(qtyInput.value, 10);
                if (isNaN(parsed) || parsed <= 0) {
                    qtyInput.value = 1;
                    } else {
                    qtyInput.value = parsed;
                    }
                }
            const action = form.getAttribute('data-action');
            const fd = new FormData(form);
            const res = await fetch(action, {
                method: 'POST',
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                body: fd
            });
            if (res.ok) {
                await loadPOs();
            }
        });

        // Batch receive via AJAX
        const btnReceiveAll = document.getElementById('btnReceiveAll');
        if (btnReceiveAll) btnReceiveAll.addEventListener('click', async function () {
            const form = document.getElementById('batchReceiveForm');
            // Ensure all batch quantities are integers
            form.querySelectorAll('input[id^="batchqty-"]').forEach(inp => {
                const parsed = parseInt(inp.value, 10);
                inp.value = (!isNaN(parsed) && parsed > 0) ? parsed : 1;
                });
            const fd = new FormData(form);
            const res = await fetch(form.getAttribute('action') || '/Suppliers/ReceiveAllPurchaseOrders', {
                method: 'POST',
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                body: fd
            });
            if (res.ok) {
                await loadPOs();
            }
        });
        // Prevent decimal typing and non-digits in quantity inputs
        document.addEventListener('input', function (e) {
            const input = e.target.closest('input.row-delivered-qty');
            if (!input) return;
            input.value = input.value.replace(/[^0-9]/g, '');
            if (input.value === '' || input.value === '0') input.value = '1';
            });
    })();
</script>


