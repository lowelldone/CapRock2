@model Capstone2.Models.DateSummaryPageViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<style>
    :root {
        --primary-purple: #7c3aed;
        --primary-purple-dark: #6d28d9;
        --primary-purple-light: #a78bfa;
        --secondary-purple: #8b5cf6;
        --accent-purple: #c084fc;
        --purple-bg: #faf5ff;
        --purple-bg-light: #f3e8ff;
        --purple-border: #e9d5ff;
        --text-purple: #581c87;
        --text-purple-light: #7c3aed;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --info-color: #3b82f6;
    }

    body {
        background: linear-gradient(135deg, var(--purple-bg) 0%, var(--purple-bg-light) 50%, #f8fafc 100%);
        min-height: 100vh;
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .dashboard-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Header Section */
    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 1rem 0;
    }

    .brand-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #374151;
        margin: 0;
    }

    .header-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .header-icon {
        font-size: 1.5rem;
        color: #6b7280;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        display: inline-block; /* needed so transform animations apply reliably */
    }
    /* Bell click animation */
    #notifBell.ringing {
        animation: bellRing 0.7s ease-in-out 0s 1 normal both;
        transform-origin: top center;
    }
    /* Notification dropdown */
    .notif-wrapper {
        position: relative;
    }

    /* Small red dot on bell when there are new notifications */
    .notif-indicator {
        position: absolute;
        top: 2px;
        right: 2px;
        width: 10px;
        height: 10px;
        background: #ef4444;
        border: 2px solid #fff;
        border-radius: 50%;
        display: none;
        z-index: 1001;
        pointer-events: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .notif-dropdown {
        position: absolute;
        right: 0;
        top: 120%;
        width: 320px;
        background: #fff;
        border: 1px solid var(--purple-border);
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
        display: none;
        z-index: 1050;
    }

        .notif-dropdown.show {
            display: block;
        }

    .notif-header {
        padding: .75rem 1rem;
        border-bottom: 1px solid var(--purple-border);
        font-weight: 700;
        color: var(--text-purple);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notif-list {
        max-height: 320px;
        overflow-y: auto;
    }

    .notif-item {
        padding: .75rem 1rem;
        border-bottom: 1px solid #f3e8ff;
        position: relative;
    }

    /* Make entire notification row clickable and add purple hover */
    .notif-list a {
        display: block;
    }

    .notif-item {
        transition: background-color .2s ease, color .2s ease, border-color .2s ease;
        border-left: 4px solid transparent;
        border-radius: 8px;
    }

        .notif-item:hover {
            background: var(--purple-bg-light);
            color: var(--primary-purple);
            border-left-color: var(--primary-purple);
        }

            .notif-item:hover .notif-title {
                color: var(--primary-purple);
            }

            .notif-item:hover .notif-meta {
                color: var(--text-purple-light);
            }

        .notif-item:last-child {
            border-bottom: none;
        }

    /* Per-item unseen indicator */
    .notif-new-dot {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 8px;
        height: 8px;
        background: #ef4444;
        border-radius: 50%;
        display: inline-block;
    }

    .notif-title {
        font-weight: 600;
        color: #374151;
        font-size: .95rem;
    }

    .notif-meta {
        font-size: .8rem;
        color: #6b7280;
    }

    .notif-dot {
        background: #ef4444;
        color: #fff;
        border-radius: 999px;
        padding: 0 .45rem;
        font-size: .75rem;
        margin-left: .35rem;
    }

    .header-icon:hover {
        background: var(--purple-bg-light);
        color: var(--primary-purple);
    }

    .daily-view-btn {
        background: var(--primary-purple);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .daily-view-btn:hover {
            background: var(--primary-purple-dark);
            transform: translateY(-2px);
        }

    /* Modern Alert Styles */
    .modern-alert {
        padding: 1rem 1.25rem;
        margin-bottom: 1.5rem;
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: space-between;
        animation: slideInDown 0.3s ease-out;
    }

    .modern-alert-success {
        background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
        color: #065f46;
        border-left: 4px solid #10b981;
    }

    .modern-alert-danger {
        background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
        color: #991b1b;
        border-left: 4px solid #ef4444;
    }

    .modern-alert i {
        font-size: 1.25rem;
        margin-right: 0.5rem;
    }

    .btn-close {
        background: transparent;
        border: none;
        font-size: 1.25rem;
        opacity: 0.7;
        transition: opacity 0.2s;
        color: inherit;
    }

        .btn-close:hover {
            opacity: 1;
        }

    @@keyframes slideInDown {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @@keyframes slideOutUp {
        from {
            transform: translateY(0);
            opacity: 1;
        }

        to {
            transform: translateY(-20px);
            opacity: 0;
        }
    }
    /* Bell ring keyframes */
    @@keyframes bellRing {
        0% {
            transform: rotate(0deg);
        }

        10% {
            transform: rotate(-18deg);
        }

        20% {
            transform: rotate(16deg);
        }

        30% {
            transform: rotate(-14deg);
        }

        40% {
            transform: rotate(12deg);
        }

        50% {
            transform: rotate(-9deg);
        }

        60% {
            transform: rotate(7deg);
        }

        70% {
            transform: rotate(-4deg);
        }

        80% {
            transform: rotate(3deg);
        }

        90% {
            transform: rotate(-2deg);
        }

        100% {
            transform: rotate(0deg);
        }
    }

    /* Clear all link in notif header */
    .notif-clear-btn {
        background: transparent;
        border: none;
        color: var(--primary-purple);
        font-weight: 600;
        cursor: pointer;
        font-size: .85rem;
        padding: 0;
    }

        .notif-clear-btn:hover {
            color: var(--primary-purple-dark);
            text-decoration: underline;
        }

    /* Main Content Grid */
    .content-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
        position: relative;
        top: -30px;
    }

    /* Calendar and Summary Statistics Container */
    .calendar-stats-container {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.1);
        border: 1px solid var(--purple-border);
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        position: relative;
        overflow: hidden;
    }

        .calendar-stats-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-purple), var(--secondary-purple));
        }

    /* Date Range Panel */
    .date-range-panel {
        background: white;
        border-radius: 20px;
        padding: 1.5rem;
        box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.1);
        border: 1px solid var(--purple-border);
    }

    .date-range-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1rem;
    }

    .date-input-group {
        margin-bottom: 0.75rem;
    }

    .date-label {
        display: block;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.25rem;
    }

    .date-input {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid var(--purple-border);
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .date-input:focus {
            outline: none;
            border-color: var(--primary-purple);
            box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
        }

    .view-summary-btn {
        background: var(--primary-purple);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 100%;
        margin-top: 0.75rem;
    }

        .view-summary-btn:hover {
            background: var(--primary-purple-dark);
            transform: translateY(-2px);
        }

    /* Calendar Panel */
    .calendar-panel {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.1);
        border: 1px solid var(--purple-border);
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .calendar-nav-btn {
        background: var(--purple-bg-light);
        border: 2px solid var(--purple-border);
        color: var(--primary-purple);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 12px;
        transition: all 0.3s ease;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .calendar-nav-btn:hover {
            background: var(--primary-purple);
            color: white;
            transform: scale(1.1);
        }

    .calendar-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #374151;
        margin: 0;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
    }

    .calendar-day-header {
        text-align: center;
        font-weight: 700;
        color: var(--text-purple);
        padding: 0.5rem;
        font-size: 0.8rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .calendar-day {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        position: relative;
        font-size: 0.9rem;
        min-height: 40px;
        border: 2px solid transparent;
    }

        .calendar-day:hover {
            background: var(--purple-bg-light);
            transform: scale(1.1);
            border-color: var(--primary-purple);
        }

        .calendar-day.has-orders {
            background: linear-gradient(135deg, var(--purple-bg-light) 0%, #e9d5ff 100%);
            color: var(--text-purple);
            font-weight: 700;
            border-color: var(--primary-purple);
        }

            .calendar-day.has-orders:hover {
                background: linear-gradient(135deg, var(--primary-purple-light) 0%, var(--accent-purple) 100%);
                color: white;
                transform: scale(1.1);
            }

        .calendar-day.has-large-order {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            color: #92400e;
            font-weight: 700;
            border-color: var(--warning-color);
        }

            .calendar-day.has-large-order:hover {
                background: linear-gradient(135deg, var(--warning-color) 0%, #f59e0b 100%);
                color: white;
                transform: scale(1.1);
            }

        .calendar-day.other-month {
            color: #d1d5db;
            opacity: 0.6;
        }

        .calendar-day.today {
            background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);
            color: white;
            font-weight: 700;
            border-color: var(--success-color);
        }

            .calendar-day.today:hover {
                background: linear-gradient(135deg, #059669 0%, #047857 100%);
                transform: scale(1.1);
            }

    /* Summary Statistics - Capsule/Stadium Shape */
    .summary-stats-panel {
        border-radius: 50px;
        border: 1px solid var(--purple-border);
        padding: 2rem;
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: right;
        min-height: 400px;
    }

        .summary-stats-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-purple), var(--secondary-purple));
        }

    .summary-stats-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .stats-grid {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        flex-grow: 1;
        justify-content: center;
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 20px;
        border: 1px solid var(--purple-border);
        transition: all 0.3s ease;
    }

        .stat-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(124, 58, 237, 0.2);
            background: rgba(255, 255, 255, 0.95);
        }

    .stat-number {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

        .stat-number.primary {
            color: var(--primary-purple);
        }

        .stat-number.success {
            color: var(--success-color);
        }

        .stat-number.warning {
            color: var(--warning-color);
        }

    .stat-label {
        color: #6b7280;
        font-size: 0.9rem;
        font-weight: 500;
    }

    /* Filter Button */
    .filter-btn {
        background: var(--primary-purple);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        position: absolute;
        top: -50px;
        right: 0;
        z-index: 10;
        box-shadow: 0 4px 12px rgba(124, 58, 237, 0.2);
    }

        .filter-btn:hover {
            background: var(--primary-purple-dark);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(124, 58, 237, 0.4);
        }

    /* Orders by Date Panel */
    .orders-panel {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.1);
        border: 1px solid var(--purple-border);
        position: relative;
        top: -30px;
    }

    .orders-panel-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1.5rem;
    }

    .orders-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .order-card {
        background: white;
        border-radius: 16px;
        border: 2px solid var(--purple-border);
        padding: 1.5rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        cursor: pointer;
    }

        .order-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-purple), var(--secondary-purple));
        }

        .order-card:hover {
            box-shadow: 0 8px 25px rgba(124, 58, 237, 0.2);
            transform: translateY(-3px);
            border-color: var(--primary-purple);
        }

        .order-card.danger {
            border-left: 4px solid var(--danger-color);
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
        }

        .order-card.success {
            border-left: 4px solid var(--success-color);
            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
        }

        .order-card.warning {
            border-left: 4px solid var(--warning-color);
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        }

    .order-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
    }

    .order-date {
        font-weight: 700;
        color: #374151;
        font-size: 1.1rem;
    }

    .pax-badge {
        font-size: 0.8rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-weight: 600;
    }

        .pax-badge.danger {
            background: var(--danger-color);
            color: white;
        }

        .pax-badge.success {
            background: var(--success-color);
            color: white;
        }

        .pax-badge.warning {
            background: var(--warning-color);
            color: white;
        }

    .order-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .order-detail-item {
        text-align: center;
    }

    .order-detail-label {
        font-size: 0.8rem;
        color: #6b7280;
        margin-bottom: 0.25rem;
    }

    .order-detail-value {
        font-weight: 700;
        color: #374151;
    }

    .order-status {
        font-weight: 600;
        font-size: 0.9rem;
    }

        .order-status.danger {
            color: var(--danger-color);
        }

        .order-status.success {
            color: var(--success-color);
        }

        .order-status.warning {
            color: var(--warning-color);
        }

    .order-footer {
        text-align: center;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid var(--purple-border);
    }

    .order-footer-text {
        font-size: 0.8rem;
        color: #6b7280;
    }

    /* Enhanced Responsive Design */

    /* Large Desktop (1400px and up) */
    @@media (min-width: 1400px) {
        .dashboard-container {
            max-width: 1600px;
            padding: 3rem;
        }

        .calendar-stats-container {
            grid-template-columns: 1.2fr 0.8fr;
            gap: 3rem;
        }

        .orders-grid {
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        }
    }

    /* Desktop (1200px - 1399px) */
    @@media (max-width: 1399px) and (min-width: 1200px) {
        .dashboard-container {
            max-width: 1200px;
            padding: 2.5rem;
        }

        .calendar-stats-container {
            grid-template-columns: 1fr 0.8fr;
            gap: 2.5rem;
        }
    }

    /* Tablet (768px - 1199px) */
    @@media (max-width: 1199px) and (min-width: 768px) {
        .dashboard-container {
            padding: 1.5rem;
        }

        .calendar-stats-container {
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        .calendar-panel {
            padding: 1.5rem;
        }

        .summary-stats-panel {
            padding: 1.5rem;
            min-height: 300px;
        }

        .stats-grid {
            flex-direction: row;
            gap: 1rem;
        }

        .stat-item {
            flex: 1;
            padding: 0.75rem;
        }

        .stat-number {
            font-size: 2rem;
        }

        .orders-grid {
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        }

        .header-section {
            flex-direction: row;
            align-items: center;
        }

        .brand-title {
            font-size: 2.25rem;
        }

        .header-controls {
            gap: 0.75rem;
        }

        .header-icon {
            font-size: 1.25rem;
            padding: 0.4rem;
        }
    }

    /* Mobile (max-width: 767px) */
    @@media (max-width: 767px) {
        .dashboard-container {
            padding: 1rem;
        }

        .content-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .calendar-stats-container {
            grid-template-columns: 1fr;
            gap: 1.5rem;
            padding: 1.5rem;
        }

        .calendar-panel {
            padding: 1rem;
        }

        .summary-stats-panel {
            padding: 1rem;
            min-height: 250px;
        }

        .stats-grid {
            flex-direction: column;
            gap: 1rem;
        }

        .stat-item {
            padding: 0.75rem;
        }

        .stat-number {
            font-size: 2rem;
        }

        .orders-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .order-card {
            padding: 1rem;
        }

        .header-section {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .brand-title {
            font-size: 1.75rem;
        }

        .header-controls {
            justify-content: center;
            gap: 1rem;
        }

        .header-icon {
            font-size: 1.1rem;
            padding: 0.5rem;
        }

        .notif-dropdown {
            width: 280px;
            right: -20px;
        }

        .calendar-grid {
            gap: 2px;
        }

        .calendar-day {
            min-height: 35px;
            font-size: 0.8rem;
        }

        .calendar-day-header {
            font-size: 0.7rem;
            padding: 0.4rem;
        }

        .calendar-nav-btn {
            width: 35px;
            height: 35px;
        }

        .calendar-title {
            font-size: 1.1rem;
        }

        .filter-btn {
            top: -40px;
            right: 10px;
            padding: 0.4rem 0.8rem;
            font-size: 0.8rem;
        }

        .orders-panel {
            padding: 1rem;
            top: -20px;
        }

        .orders-panel-title {
            font-size: 1.1rem;
            margin-bottom: 1rem;
        }

        .order-details {
            grid-template-columns: 1fr;
            gap: 0.5rem;
        }

        .order-card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .pax-badge {
            font-size: 0.7rem;
            padding: 0.2rem 0.6rem;
        }
    }

    /* Small Mobile (max-width: 480px) */
    @@media (max-width: 480px) {
        .dashboard-container {
            padding: 0.75rem;
        }

        .calendar-stats-container {
            padding: 1rem;
            gap: 1rem;
        }

        .calendar-panel {
            padding: 0.75rem;
        }

        .summary-stats-panel {
            padding: 0.75rem;
            min-height: 200px;
        }

        .stat-number {
            font-size: 1.75rem;
        }

        .stat-label {
            font-size: 0.8rem;
        }

        .brand-title {
            font-size: 1.5rem;
        }

        .header-icon {
            font-size: 1rem;
            padding: 0.4rem;
        }

        .notif-dropdown {
            width: 250px;
            right: -10px;
        }

        .calendar-day {
            min-height: 30px;
            font-size: 0.75rem;
        }

        .calendar-day-header {
            font-size: 0.65rem;
            padding: 0.3rem;
        }

        .calendar-nav-btn {
            width: 30px;
            height: 30px;
        }

        .calendar-title {
            font-size: 1rem;
        }

        .filter-btn {
            top: -35px;
            right: 5px;
            padding: 0.3rem 0.6rem;
            font-size: 0.75rem;
        }

        .orders-panel {
            padding: 0.75rem;
            top: -15px;
        }

        .order-card {
            padding: 0.75rem;
        }

        .order-date {
            font-size: 1rem;
        }

        .order-detail-label {
            font-size: 0.75rem;
        }

        .order-detail-value {
            font-size: 0.9rem;
        }

        .order-status {
            font-size: 0.8rem;
        }

        .order-footer-text {
            font-size: 0.75rem;
        }
    }

    /* Touch-friendly improvements */
    @@media (max-width: 768px) {
        .calendar-day,
        .calendar-nav-btn,
        .header-icon,
        .order-card {
            min-height: 44px;
            min-width: 44px;
        }

        .calendar-day {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .order-card {
            cursor: pointer;
            -webkit-tap-highlight-color: transparent;
        }

            .order-card:active {
                transform: scale(0.98);
            }
    }

    /* Landscape mobile orientation */
    @@media (max-width: 767px) and (orientation: landscape) {
        .calendar-stats-container {
            grid-template-columns: 1fr 0.6fr;
        }

        .summary-stats-panel {
            min-height: 200px;
        }

        .stats-grid {
            flex-direction: row;
            gap: 0.5rem;
        }

        .stat-item {
            padding: 0.5rem;
        }

        .stat-number {
            font-size: 1.5rem;
        }

        .stat-label {
            font-size: 0.75rem;
        }
    }

    /* Profile Modal Responsive Styles */
    .modal-dialog {
        margin: 1rem auto;
        max-width: 500px;
        display: flex;
        align-items: center;
        min-height: calc(100% - 2rem);
    }

    .modal-content {
        border-radius: 12px;
        border: none;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        background: linear-gradient(135deg, var(--primary-purple) 0%, var(--secondary-purple) 100%);
        color: white;
        border-bottom: none;
        border-radius: 12px 12px 0 0;
        padding: 1.5rem;
    }

    .modal-title {
        font-weight: 600;
        font-size: 1.25rem;
    }

    .btn-close {
        filter: invert(1);
        opacity: 0.8;
    }

    .btn-close:hover {
        opacity: 1;
    }

    .modal-body {
        padding: 2rem;
    }

    .modal-footer {
        border-top: 1px solid var(--purple-border);
        padding: 1.5rem;
        background: var(--purple-bg);
    }

    .form-label {
        font-weight: 600;
        color: var(--text-purple);
        margin-bottom: 0.5rem;
    }

    .form-control {
        border: 2px solid var(--purple-border);
        border-radius: 8px;
        padding: 0.75rem;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: var(--primary-purple);
        box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: var(--primary-purple);
        border-color: var(--primary-purple);
    }

    .btn-primary:hover {
        background: var(--primary-purple-dark);
        border-color: var(--primary-purple-dark);
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: #6b7280;
        border-color: #6b7280;
    }

    .btn-secondary:hover {
        background: #4b5563;
        border-color: #4b5563;
        transform: translateY(-2px);
    }

    /* Mobile responsive adjustments for modals */
    @@media (max-width: 768px) {
        .modal-dialog {
            margin: 0.5rem auto;
            max-width: calc(100% - 1rem);
            display: flex;
            align-items: center;
            min-height: calc(100% - 1rem);
        }

        .modal-header {
            padding: 1rem;
        }

        .modal-title {
            font-size: 1.1rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1rem;
            flex-direction: column;
            gap: 0.5rem;
        }

        .btn {
            width: 100%;
            margin: 0;
        }

        .form-control {
            font-size: 16px;
            padding: 0.75rem;
        }
    }

    @@media (max-width: 480px) {
        .modal-dialog {
            margin: 0.25rem auto;
            max-width: calc(100% - 0.5rem);
            display: flex;
            align-items: center;
            min-height: calc(100% - 0.5rem);
        }

        .modal-header {
            padding: 0.75rem;
        }

        .modal-title {
            font-size: 1rem;
        }

        .modal-body {
            padding: 1rem;
        }

        .modal-footer {
            padding: 0.75rem;
        }

        .form-control {
            font-size: 16px;
            padding: 0.6rem;
        }
    }

    /* Print styles */
    @@media print {
        .dashboard-container {
            background: white;
            padding: 1rem;
        }

        .header-controls,
        .filter-btn,
        .calendar-nav-btn {
            display: none;
        }

        .calendar-stats-container {
            box-shadow: none;
            border: 1px solid #ddd;
        }

        .order-card {
            break-inside: avoid;
            box-shadow: none;
            border: 1px solid #ddd;
        }
    }
</style>

<div class="dashboard-container">
    <!-- Success/Error Messages for Profile Updates -->
    @if (TempData["ProfileSuccess"] != null)
    {
        <div class="modern-alert modern-alert-success" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["ProfileSuccess"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ProfileError"] != null)
    {
        <div class="modern-alert modern-alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["ProfileError"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Header Section -->
    <div class="header-section">
        <h1 class="brand-title">GRUSH Catering Services</h1>
        <div class="header-controls">
            <div class="notif-wrapper">
                <i id="notifBell" class="bi bi-bell header-icon" title="Notifications"></i>
                <span id="notifDot" class="notif-indicator"></span>
                <div id="notifMenu" class="notif-dropdown">
                    <div class="notif-header">
                        <span>Activity Notifications</span>
                        <button id="notifClearBtn" type="button" class="notif-clear-btn">Clear</button>
                        <span id="notifCount" class="notif-dot" style="display:none">0</span>
                    </div>
                    <div id="notifList" class="notif-list">
                        <div class="notif-item"><div class="notif-title">No recent activity</div><div class="notif-meta">-</div></div>
                    </div>
                </div>
            </div>
            <i class="bi bi-person-circle header-icon" onclick="openProfileModal()" style="cursor: pointer;" title="Profile"></i>
        </div>
    </div>

    <!-- Calendar and Summary Statistics Container -->
    <div class="content-grid">
        <div class="calendar-stats-container">
            <!-- Left Side - Calendar View -->
            <div class="calendar-panel">
                <div class="calendar-header">
                    <button class="calendar-nav-btn" onclick="previousMonth()">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <h3 class="calendar-title" id="currentMonth">@Model.StartDate.ToString("MMMM yyyy")</h3>
                    <button class="calendar-nav-btn" onclick="nextMonth()">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
                <div class="calendar-grid">
                    <div class="calendar-day-header">SUN</div>
                    <div class="calendar-day-header">MON</div>
                    <div class="calendar-day-header">TUE</div>
                    <div class="calendar-day-header">WED</div>
                    <div class="calendar-day-header">THU</div>
                    <div class="calendar-day-header">FRI</div>
                    <div class="calendar-day-header">SAT</div>

                    @{
                        var currentDate = Model.StartDate;
                        var firstDayOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
                        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
                        var endDate = startDate.AddDays(41);

                        var ordersByDate = Model.DateSummary.ToDictionary(x => x.Date, x => x);
                    }

                    @for (var date = startDate; date < endDate; date = date.AddDays(1))
                    {
                        var isCurrentMonth = date.Month == currentDate.Month;
                        var isToday = date.Date == DateTime.Today.Date;
                        var hasOrders = ordersByDate.ContainsKey(date.Date);
                        var dateSummary = hasOrders ? ordersByDate[date.Date] : null;
                        var hasLargeOrder = dateSummary?.HasLargeOrder ?? false;

                        var cssClass = "calendar-day";
                        if (!isCurrentMonth) cssClass += " other-month";
                        if (isToday) cssClass += " today";
                        if (hasLargeOrder) cssClass += " has-large-order";
                        else if (hasOrders) cssClass += " has-orders";

                        <div class="@cssClass"
                             onclick="@(hasOrders ? $"window.location.href='{Url.Action("OrdersByDate", "Customers", new { selectedDate = date.ToString("yyyy-MM-dd") })}'" : "")"
                             style="@(hasOrders ? "cursor: pointer;" : "")">
                            @date.Day
                        </div>
                    }
                </div>
            </div>

            <!-- Right Side - Summary Statistics (Capsule/Stadium Shape) -->
            <div class="summary-stats-panel">
                <h3 class="summary-stats-title">Summary Statistics</h3>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number primary">@Model.AllDateSummary.Count</div>
                        <div class="stat-label">Days with Orders</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number success">@Model.AllDateSummary.Sum(x => x.OrderCount)</div>
                        <div class="stat-label">Total Orders</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number warning">@Model.AllDateSummary.Count(x => x.HasLargeOrder)</div>
                        <div class="stat-label">Large Order Days</div>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <!-- Filter Button - Between Summary Statistics and Orders by Date -->
    <div style="position: relative; margin: 1rem 0;">
        <button class="filter-btn" onclick="openFilterModal()">
            <i class="bi bi-funnel"></i>
            Filter
        </button>
    </div>
</div>



<!-- Orders by Date -->
<div class="orders-panel">
    <h3 class="orders-panel-title">Orders by Date</h3>

    @if (!Model.AllDateSummary.Any())
    {
        <div class="text-center py-4">
            <i class="bi bi-calendar-x fs-1 text-muted"></i>
            <p class="text-muted mt-2">No orders found.</p>
        </div>
    }
    else
    {
        <div class="orders-grid">
            @foreach (var dateSummary in Model.AllDateSummary)
            {
                var statusClass = dateSummary.HasLargeOrder ? "warning" :
                dateSummary.TotalPax > 700 ? "danger" :
                dateSummary.TotalPax > 560 ? "warning" : "success";

                var statusText = dateSummary.HasLargeOrder ? "Large Order" :
                dateSummary.TotalPax >= 700 ? "Full Capacity" :
                dateSummary.TotalPax > 560 ? "Near Capacity" : "Available Capacity";

                <div class="order-card @statusClass"
                     onclick="window.location.href='@Url.Action("OrdersByDate", "Customers", new { selectedDate = dateSummary.Date.ToString("yyyy-MM-dd") })'">
                    <div class="order-card-header">
                        <div class="order-date">@dateSummary.Date.ToString("MMM dd, yyyy")</div>
                        <span class="pax-badge @statusClass">@dateSummary.TotalPax/700 pax</span>
                    </div>

                    <div class="order-details">
                        <div class="order-detail-item">
                            <div class="order-detail-label">Orders:</div>
                            <div class="order-detail-value">@dateSummary.OrderCount</div>
                        </div>
                        <div class="order-detail-item">
                            <div class="order-detail-label">Status:</div>
                            <div class="order-status @statusClass">@statusText</div>
                        </div>
                    </div>

                    <div class="order-footer">
                        <div class="order-footer-text">
                            <i class="bi bi-cursor me-1"></i>Click to view details
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Filter Modal -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Date Range Filter</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="get" id="filterForm">
                    <div class="mb-3">
                        <label class="form-label">Start Date:</label>
                        <input type="date" name="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")"
                               class="form-control" style="font-size: 16px;" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date:</label>
                        <input type="date" name="endDate" value="@Model.EndDate.ToString("yyyy-MM-dd")"
                               class="form-control" style="font-size: 16px;" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyFilter()">Apply Filter</button>
            </div>
        </div>
    </div>
</div>

<!-- Profile Modal -->
<div class="modal fade" id="profileModal" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="profileModalLabel">Update Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="profileForm" method="post" asp-controller="PaidOrders" asp-action="UpdateProfile">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required style="font-size: 16px;">
                    </div>
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="currentPassword" name="currentPassword" required style="font-size: 16px;">
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" name="newPassword" required style="font-size: 16px;">
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required style="font-size: 16px;">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="profileForm" class="btn btn-primary">Update Profile</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentMonth = @Model.StartDate.Month;
    let currentYear = @Model.StartDate.Year;

    function previousMonth() {
        currentMonth--;
        if (currentMonth < 1) {
            currentMonth = 12;
            currentYear--;
        }
        updateCalendar();
    }

    function nextMonth() {
        currentMonth++;
        if (currentMonth > 12) {
            currentMonth = 1;
            currentYear++;
        }
        updateCalendar();
    }

    function updateCalendar() {
        const monthNames = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        document.getElementById('currentMonth').textContent = `${monthNames[currentMonth - 1]} ${currentYear}`;

        const firstDay = new Date(currentYear, currentMonth - 1, 1);
        const lastDay = new Date(currentYear, currentMonth, 0);

        const startDate = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-01`;
        const endDate = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-${lastDay.getDate()}`;

        // Update the modal form inputs
        const modalStartDate = document.querySelector('#filterModal input[name="startDate"]');
        const modalEndDate = document.querySelector('#filterModal input[name="endDate"]');
        if (modalStartDate) modalStartDate.value = startDate;
        if (modalEndDate) modalEndDate.value = endDate;

        // Submit the form
        document.getElementById('filterForm').submit();
    }

    function openFilterModal() {
        const modal = new bootstrap.Modal(document.getElementById('filterModal'));
        modal.show();
    }

    function applyFilter() {
        document.getElementById('filterForm').submit();
    }

    function openProfileModal() {
        const modal = new bootstrap.Modal(document.getElementById('profileModal'));
        modal.show();
    }

    // Form validation
    document.addEventListener('DOMContentLoaded', function () {
        const profileForm = document.getElementById('profileForm');
        if (profileForm) {
            profileForm.addEventListener('submit', function (e) {
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                if (newPassword !== confirmPassword) {
                    e.preventDefault();
                    alert('New password and confirm password do not match!');
                    return false;
                }

                if (newPassword.length < 6) {
                    e.preventDefault();
                    alert('Password must be at least 6 characters long!');
                    return false;
                }
            });
        }
    });

    // Make alert close buttons functional
    document.addEventListener('DOMContentLoaded', function () {
        // Handle alert close buttons
        const closeButtons = document.querySelectorAll('.btn-close');
        closeButtons.forEach(button => {
            button.addEventListener('click', function () {
                const alert = this.closest('.modern-alert');
                if (alert) {
                    alert.style.animation = 'slideOutUp 0.3s ease-out';
                    setTimeout(() => {
                        alert.remove();
                    }, 300);
                }
            });
        });

        // Auto-hide success alerts after 5 seconds
        const successAlerts = document.querySelectorAll('.modern-alert-success');
        successAlerts.forEach(alert => {
            setTimeout(() => {
                if (alert && alert.parentNode) {
                    alert.style.animation = 'slideOutUp 0.3s ease-out';
                    setTimeout(() => {
                        alert.remove();
                    }, 300);
                }
            }, 5000);
        });
    });
    // Notifications logic
    (function () {
        const bell = document.getElementById('notifBell');
        const menu = document.getElementById('notifMenu');
        const list = document.getElementById('notifList');
        const countEl = document.getElementById('notifCount');
        const bellDot = document.getElementById('notifDot');
        if (!bell || !menu) return;
        let latestSeenUtc = null;
        let lastItems = [];
        const SEEN_KEY = 'notifSeenIds';
        function getSeenIds() {
            try {
                const raw = localStorage.getItem(SEEN_KEY);
                if (!raw) return new Set();
                const arr = JSON.parse(raw);
                return new Set((Array.isArray(arr) ? arr : []).map(x => String(x)));
            } catch { return new Set(); }
        }
        function saveSeenIds(seen) {
            try { localStorage.setItem(SEEN_KEY, JSON.stringify(Array.from(seen))); } catch { }
        }
        async function loadNotifications(onOpen) {
            try {
                var qs = (!onOpen && latestSeenUtc) ? ('?since=' + encodeURIComponent(latestSeenUtc)) : '';
                var logsRes = await fetch('/DashboardDateSummary/RecentLogs' + qs);
                var ordersRes = await fetch('/DashboardDateSummary/RecentOrders' + qs);
                var logsData = logsRes.ok ? await logsRes.json() : { items: [], latestUtc: null };
                var ordersData = ordersRes.ok ? await ordersRes.json() : { items: [], latestUtc: null };

                var merged = [];
                if (Array.isArray(logsData.items)) {
                    for (var i = 0; i < logsData.items.length; i++) {
                        var li = logsData.items[i];
                        merged.push({ type: 'log', id: String(li.auditLogId), ts: li.timestamp, data: li });
                    }
                }
                if (Array.isArray(ordersData.items)) {
                    for (var j = 0; j < ordersData.items.length; j++) {
                        var oi = ordersData.items[j];
                        var ts = oi.timestamp || oi.Timestamp || oi.orderDate || oi.OrderDate;
                        var oid = oi.orderId || oi.OrderId;
                        merged.push({ type: 'order', id: 'order-' + String(oid), ts: ts, data: oi });
                    }
                }

                merged = merged.filter(function (x) { return x.ts; })
                    .sort(function (a, b) { return new Date(b.ts) - new Date(a.ts); });

                lastItems = merged;

                var latestFromLogs = logsData.latestUtc;
                var latestFromOrders = ordersData.latestUtc;
                if (onOpen) {
                    latestSeenUtc = latestFromLogs && latestFromOrders
                        ? (new Date(latestFromLogs) > new Date(latestFromOrders) ? latestFromLogs : latestFromOrders)
                        : (latestFromLogs || latestFromOrders || latestSeenUtc);
                }

                var seen = getSeenIds();
                var filtered = merged.filter(function (x) { return !seen.has(String(x.id)); });

                if (filtered.length === 0) {
                    list.innerHTML = '<div class="notif-item"><div class="notif-title">No recent activity</div><div class="notif-meta">-</div></div>';
                } else {
                    var html = '';
                    for (var k = 0; k < filtered.length; k++) {
                        var x = filtered[k];
                        if (x.type === 'order') {
                            var o = x.data || {};
                            var whenStr = new Date(o.Timestamp || o.timestamp || o.OrderDate || o.orderDate || Date.now()).toLocaleString();
                            var orderNumStr = o.OrderNumber || o.orderNumber;
                            var title = orderNumStr ? ('Order ' + orderNumStr) : 'New Order';
                            var name = o.CustomerName || o.customerName || 'Customer';
                            var cid = o.CustomerID || o.customerID || o.customerId || '';
                            var href = '/Customers/ViewOrder?id=' + encodeURIComponent(cid);
                            html += '<a href="' + href + '" class="text-decoration-none text-reset" data-audit-id="' + x.id + '"><div class="notif-item"><span class="notif-new-dot"></span><div class="notif-title">' + title + '</div><div class="notif-meta">' + name + ' - ' + whenStr + '</div></div></a>';
                        } else {
                            var it = x.data || {};
                            var when = it.timestamp ? new Date(it.timestamp).toLocaleString() : '';
                            var who = (it.username || 'User') + (it.role ? (' (' + it.role + ')') : '');
                            var action = it.action || 'Action';
                            var ord = it.orderNumber ? (' - Order ' + it.orderNumber) : '';
                            var href2 = '/AuditLogs/Index?highlightId=' + encodeURIComponent(it.auditLogId);
                            html += '<a href="' + href2 + '" class="text-decoration-none text-reset" data-audit-id="' + x.id + '"><div class="notif-item"><span class="notif-new-dot"></span><div class="notif-title">' + action + ord + '</div><div class="notif-meta">' + who + ' - ' + when + '</div></div></a>';
                        }
                    }
                    list.innerHTML = html;
                }

                var hasNew = filtered.length > 0;
                if (hasNew) {
                    var badgeCount = filtered.length;
                    if (countEl) countEl.textContent = String(badgeCount);
                    countEl.style.display = '';
                    if (bellDot) bellDot.style.display = 'block';
                } else {
                    countEl.style.display = 'none';
                    if (bellDot) bellDot.style.display = 'none';
                }
            } catch (err) { console.error(err); }
        }

        bell.addEventListener('click', async () => {
            bell.classList.remove('ringing');
            void bell.offsetWidth;
            bell.classList.add('ringing');
            menu.classList.toggle('show');
            await loadNotifications(true); // fetch full list on open (no since)
        });

        bell.addEventListener('animationend', () => {
            bell.classList.remove('ringing');
        });

        document.addEventListener('click', (e) => {
            if (!menu.contains(e.target) && e.target !== bell) {
                menu.classList.remove('show');
            }
        });

        // Remove clicked notification, persist seen, then navigate
        document.addEventListener('click', function (e) {
            var anchor = e.target.closest && e.target.closest('#notifList a[data-audit-id]');
            if (!anchor) return;
            e.preventDefault();

            var id = anchor.getAttribute('data-audit-id');
            var href = anchor.getAttribute('href');

            var dot = anchor.querySelector('.notif-new-dot');
            if (dot) dot.remove();

            // Remove from list
            anchor.remove();

            // Persist as seen
            if (id) {
                var seen = getSeenIds();
                seen.add(String(id));
                saveSeenIds(seen);
            }

            // Update UI if empty or no more dots
            if (!list.querySelector('a[data-audit-id]')) {
                list.innerHTML = '<div class="notif-item"><div class="notif-title">No recent activity</div><div class="notif-meta">-</div></div>';
                if (bellDot) bellDot.style.display = 'none';
                if (countEl) countEl.style.display = 'none';
            } else if (!list.querySelector('.notif-new-dot')) {
                if (bellDot) bellDot.style.display = 'none';
                if (countEl) countEl.style.display = 'none';
            }

            if (href) setTimeout(function () { window.location.href = href; }, 0);
        });

        // Clear all button fix (use hyphen)
        const clearBtn = document.getElementById('notifClearBtn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                const seen = getSeenIds();
                (lastItems || []).forEach(x => seen.add(String(x.id)));
                saveSeenIds(seen);
                list.innerHTML = '<div class="notif-item"><div class="notif-title">No recent activity</div><div class="notif-meta">-</div></div>';
                if (bellDot) bellDot.style.display = 'none';
                if (countEl) countEl.style.display = 'none';
            });
        }

        // Initial load & background poll (use since)
        loadNotifications(false);
        setInterval(function () { loadNotifications(false); }, 60000);
    })();

    // Enhanced mobile responsiveness
    document.addEventListener('DOMContentLoaded', function () {
        // Touch-friendly calendar interactions
        const calendarDays = document.querySelectorAll('.calendar-day');
        calendarDays.forEach(day => {
            day.addEventListener('touchstart', function (e) {
                this.style.transform = 'scale(0.95)';
            });

            day.addEventListener('touchend', function (e) {
                this.style.transform = '';
            });
        });

        // Mobile-optimized order card interactions
        const orderCards = document.querySelectorAll('.order-card');
        orderCards.forEach(card => {
            card.addEventListener('touchstart', function (e) {
                this.style.transform = 'scale(0.98)';
            });

            card.addEventListener('touchend', function (e) {
                this.style.transform = '';
            });
        });

        // Responsive notification dropdown positioning
        function adjustNotificationPosition() {
            const notifDropdown = document.getElementById('notifMenu');
            const notifBell = document.getElementById('notifBell');
            const notifDot = document.getElementById('notifDot');

            if (notifDropdown && notifBell) {
                const rect = notifBell.getBoundingClientRect();
                const viewportWidth = window.innerWidth;

                if (viewportWidth <= 480) {
                    notifDropdown.style.right = '-10px';
                    notifDropdown.style.width = '250px';
                } else if (viewportWidth <= 768) {
                    notifDropdown.style.right = '-20px';
                    notifDropdown.style.width = '280px';
                } else {
                    notifDropdown.style.right = '0';
                    notifDropdown.style.width = '320px';
                }
            }

            // Ensure notification dot is always visible and properly positioned
            if (notifDot) {
                notifDot.style.zIndex = '1001';
                notifDot.style.position = 'absolute';
                notifDot.style.top = '2px';
                notifDot.style.right = '2px';
                notifDot.style.width = '10px';
                notifDot.style.height = '10px';
                notifDot.style.background = '#ef4444';
                notifDot.style.border = '2px solid #fff';
                notifDot.style.borderRadius = '50%';
                notifDot.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)';
                notifDot.style.pointerEvents = 'none';
            }
        }

        // Adjust notification position on resize
        window.addEventListener('resize', adjustNotificationPosition);
        adjustNotificationPosition();

        // Mobile-optimized filter button positioning
        function adjustFilterButtonPosition() {
            const filterBtn = document.querySelector('.filter-btn');
            if (filterBtn) {
                const viewportWidth = window.innerWidth;

                if (viewportWidth <= 480) {
                    filterBtn.style.top = '-35px';
                    filterBtn.style.right = '5px';
                    filterBtn.style.fontSize = '0.75rem';
                    filterBtn.style.padding = '0.3rem 0.6rem';
                } else if (viewportWidth <= 768) {
                    filterBtn.style.top = '-40px';
                    filterBtn.style.right = '10px';
                    filterBtn.style.fontSize = '0.8rem';
                    filterBtn.style.padding = '0.4rem 0.8rem';
                } else {
                    filterBtn.style.top = '-50px';
                    filterBtn.style.right = '0px';
                    filterBtn.style.fontSize = '0.9rem';
                    filterBtn.style.padding = '0.5rem 1rem';
                }
            }
        }

        // Adjust filter button position on resize
        window.addEventListener('resize', adjustFilterButtonPosition);
        adjustFilterButtonPosition();

        // Smooth scrolling for mobile
        if (window.innerWidth <= 768) {
            document.documentElement.style.scrollBehavior = 'smooth';
        }

        // Prevent zoom on form inputs for iOS
        const formInputs = document.querySelectorAll('input[type="date"], input[type="text"], input[type="password"]');
        formInputs.forEach(input => {
            if (window.innerWidth <= 768) {
                input.style.fontSize = '16px';
            }
        });

        // Enhanced touch feedback for interactive elements
        const interactiveElements = document.querySelectorAll('.calendar-nav-btn, .header-icon, .order-card, .calendar-day');
        interactiveElements.forEach(element => {
            element.addEventListener('touchstart', function () {
                this.style.transition = 'all 0.1s ease';
            });

            element.addEventListener('touchend', function () {
                this.style.transition = 'all 0.3s ease';
            });
        });

        // Mobile-optimized modal handling
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            modal.addEventListener('shown.bs.modal', function () {
                if (window.innerWidth <= 768) {
                    this.querySelector('.modal-dialog').style.margin = '1rem';
                }
            });
        });

        // Auto-focus search inputs on mobile
        if (window.innerWidth <= 768) {
            const dateInputs = document.querySelectorAll('input[type="date"]');
            dateInputs.forEach(input => {
                input.addEventListener('focus', function () {
                    // Ensure the input is visible when focused on mobile
                    setTimeout(() => {
                        this.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }, 300);
                });
            });
        }
    });
</script> 