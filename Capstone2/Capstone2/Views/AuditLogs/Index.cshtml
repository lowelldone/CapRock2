@model IEnumerable<Capstone2.Models.AuditLog>
@{
    ViewData["Title"] = "Audit Logs - All User Activities";
}

<div class="container mt-3">
    <h2>Audit Logs - All User Activities</h2>
    <p class="text-muted small mb-3">Note: Logout activities are automatically filtered out from this view.</p>
    <style>
        .audit-table .main-row td {
            vertical-align: middle;
        }

        .audit-table .main-row {
            height: 56px;
        }

        .audit-table .toggle-btn .bi {
            transition: transform .2s ease;
        }

        .audit-table .toggle-btn[aria-expanded="true"] .bi {
            transform: rotate(180deg);
        }

        .details-card {
            background: #fff;
            border: 1px solid #e9d5ff;
            border-radius: 8px;
        }

            .details-card .table {
                margin-bottom: 0;
            }
        /* Purple highlight styling for the focused (linked) row */
        .row-highlight-purple {
            background: linear-gradient(135deg, #d8b4fe 0%, #a78bfa 100%) !important;
        }

        .row-highlight-purple td {
            background-color: transparent !important;
        }

        /* Responsive table styles */
        .table-responsive {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .audit-table {
            margin-bottom: 0;
        }

        .audit-table th {
            background: linear-gradient(135deg, #7c3aed 0%, #8b5cf6 100%);
            color: white;
            font-weight: 600;
            border: none;
            padding: 1rem 0.75rem;
            font-size: 0.9rem;
        }

        .audit-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #f3e8ff;
            vertical-align: middle;
        }

        .audit-table .main-row:hover {
            background-color: #faf5ff;
        }

        /* Mobile responsive adjustments */
        @@media (max-width: 768px) {
            .container {
                padding: 0.5rem;
            }

            .audit-table th,
            .audit-table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.8rem;
            }

            .audit-table th:nth-child(1),
            .audit-table td:nth-child(1) {
                min-width: 100px;
            }

            .audit-table th:nth-child(2),
            .audit-table td:nth-child(2) {
                min-width: 120px;
            }

            .audit-table th:nth-child(3),
            .audit-table td:nth-child(3) {
                min-width: 100px;
            }

            .audit-table th:nth-child(4),
            .audit-table td:nth-child(4) {
                min-width: 80px;
            }

            .audit-table th:nth-child(5),
            .audit-table td:nth-child(5) {
                min-width: 60px;
            }

            .form-control,
            .form-select {
                font-size: 16px;
                margin-bottom: 0.5rem;
            }

            .btn {
                font-size: 0.8rem;
                padding: 0.4rem 0.8rem;
            }

            .d-flex.gap-2 {
                flex-direction: column;
                gap: 0.5rem !important;
            }

            .d-flex.gap-2 .btn {
                width: 100%;
            }
        }

        @@media (max-width: 576px) {
            .audit-table th,
            .audit-table td {
                padding: 0.4rem 0.2rem;
                font-size: 0.75rem;
            }

            .audit-table th:nth-child(1),
            .audit-table td:nth-child(1) {
                min-width: 80px;
            }

            .audit-table th:nth-child(2),
            .audit-table td:nth-child(2) {
                min-width: 100px;
            }

            .audit-table th:nth-child(3),
            .audit-table td:nth-child(3) {
                min-width: 80px;
            }

            .audit-table th:nth-child(4),
            .audit-table td:nth-child(4) {
                min-width: 60px;
            }

            .audit-table th:nth-child(5),
            .audit-table td:nth-child(5) {
                min-width: 50px;
            }
        }
    </style>

    <form method="get" class="row g-2 mb-3" id="filterForm">
        <div class="col-auto">
            <select class="form-select" name="role">
                <option value="">All Roles</option>
                @if (ViewBag.SelectedRole == "ADMIN")
                {
                    <option value="ADMIN" selected>Admin</option>
                }
                else
                {
                    <option value="ADMIN">Admin</option>
                }
                @if (ViewBag.SelectedRole == "HEADWAITER")
                {
                    <option value="HEADWAITER" selected>Head Waiter</option>
                }
                else
                {
                    <option value="HEADWAITER">Head Waiter</option>
                }
                @if (ViewBag.SelectedRole == "WAITER")
                {
                    <option value="WAITER" selected>Waiter</option>
                }
                else
                {
                    <option value="WAITER">Waiter</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <input class="form-control" name="username" placeholder="Username" value="@Context.Request.Query["username"].ToString()" />
        </div>
        <div class="col-auto">
            <input class="form-control" name="orderNumber" placeholder="Order Number" value="@Context.Request.Query["orderNumber"].ToString()" />
        </div>
        <div class="col-auto">
            <input type="date" class="form-control" name="filterDate" placeholder="Filter by Date" value="@(ViewBag.FilterDate?.ToString("yyyy-MM-dd"))" />
        </div>
        <div class="col-auto">
            <input type="hidden" name="tzOffset" id="tzOffset" />
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
        <div class="col-auto">
            <a href="?" class="btn btn-outline-secondary">Clear Filters</a>
        </div>
    </form>

    <div class="table-responsive">
        <table class="table table-sm table-striped align-middle audit-table">
            <thead>
                <tr>
                    <th>Timestamp</th>
                    <th>User</th>
                    <th>Action</th>
                    <th>Order #</th>
                    <th class="text-end">Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in Model)
                {
                    var rowId = $"details_{log.AuditLogId}";
                    var highlightClass = (ViewBag.HighlightId != null && (int)ViewBag.HighlightId == log.AuditLogId) ? "row-highlight-purple" : string.Empty;
                    <tr class="main-row @highlightClass" id="log_@log.AuditLogId">
                        <td><span class="ts" data-utc="@log.Timestamp.ToString("o")"></span></td>
                        <td>@log.Username (@log.Role)</td>
                        <td>@log.Action</td>
                        <td>@log.OrderNumber</td>
                       
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-secondary toggle-btn" data-bs-toggle="collapse" data-bs-target="#@rowId" aria-expanded="false" aria-controls="@rowId">
                                <i class="bi bi-chevron-down"></i>
                            </button>
                        </td>
                    </tr>
                    <tr class="collapse" id="@rowId">
                        <td colspan="5">
                            <div class="p-3 details-card">
                                @{
                                    string details = log.Details ?? string.Empty;
                                    bool rendered = false;

                                    // Replace waiter IDs with names in plain-text details
                                    var wnMap = ViewBag.WaiterNames as System.Collections.Generic.IDictionary<int, string>;
                                    var hwMap = ViewBag.HeadWaiterNames as System.Collections.Generic.IDictionary<int, string>;
                                    if (wnMap != null && wnMap.Count > 0)
                                    {
                                        // case 1: phrases like "waiter 42" or "Waiter 42"
                                        if (details.IndexOf("waiter", System.StringComparison.OrdinalIgnoreCase) >= 0)
                                            {
                                            foreach (var kv in wnMap)
                                                {
                                                     details = details.Replace($"waiter {kv.Key}", $"waiter {kv.Value}")
                                                    .Replace($"Waiter {kv.Key}", $"Waiter {kv.Value}");
                                                 }
                                            }
                                        // case 2: pattern "Deployed waiters: [42,43]" -> map to names
                                        if (details.StartsWith("Deployed waiters:", StringComparison.OrdinalIgnoreCase))
                                            {
                                            var open = details.IndexOf('[');
                                            var close = details.IndexOf(']');
                                            if (open >= 0 && close > open)
                                            {
                                                var inner = details.Substring(open + 1, close - open - 1);
                                                var ids = inner.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                                            .Select(s => s.Trim())
                                                            .ToList();
                                                var names = new System.Collections.Generic.List<string>();
                                                foreach (var s in ids)
                                                {
                                                        if (int.TryParse(s, out var id) && wnMap.ContainsKey(id))
                                                            names.Add(wnMap[id]);
                                                        else if (!string.IsNullOrWhiteSpace(s))
                                                            names.Add(s);
                                                }
                                                details = $"Deployed waiters: [{string.Join(", ", names)}]";
                                            }
                                        }
                                    }

                                    // Replace head waiter IDs with names, e.g., "head waiter 20" -> "head waiter John Doe"
                                    if (hwMap != null && hwMap.Count > 0 && details.IndexOf("head waiter", System.StringComparison.OrdinalIgnoreCase) >= 0)
                                        {
                                        foreach (var kv in hwMap)
                                            {
                                                 details = details.Replace($"head waiter {kv.Key}", $"head waiter {kv.Value}")
                                                .Replace($"Head waiter {kv.Key}", $"Head waiter {kv.Value}")
                                                .Replace($"Head Waiter {kv.Key}", $"Head Waiter {kv.Value}");
                                            }
                                        }

                                    // Replace generic "order <id>" with known order number if available
                                    if (!string.IsNullOrWhiteSpace(log.OrderNumber))
                                    {
                                        details = System.Text.RegularExpressions.Regex.Replace(
                                        details,
                                        @"(?i)\border\s+\d+\b",
                                        $"order {log.OrderNumber}");
                                    }

                                    // Pulled-out materials: "PulledOut=ItemA:1,ItemB:2,..."
                                    var pulledIdx = details.IndexOf("PulledOut=", StringComparison.OrdinalIgnoreCase);
                                    if (pulledIdx >= 0)
                                    {
                                        var listStr = details.Substring(pulledIdx + "PulledOut=".Length).Trim();
                                        var tokens = listStr.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                        .Select(t => t.Trim())
                                        .ToList();
                                        var pairs = new System.Collections.Generic.List<(string name, string qty)>();
                                        foreach (var t in tokens)
                                        {
                                            var colon = t.IndexOf(':');
                                            if (colon > 0 && colon < t.Length - 1)
                                            {
                                                var name = t.Substring(0, colon).Trim();
                                                var qty = t.Substring(colon + 1).Trim();
                                                pairs.Add((name, qty));
                                            }
                                        }
                                        if (pairs.Count > 0)
                                        {
                                            <div class="small">
                                                <div class="fw-semibold mb-1">Pulled-out Materials</div>
                                                <table class="table table-sm table-bordered mb-0">
                                                    <thead>
                                                        <tr>
                                                            <th>Material</th>
                                                            <th class="text-end">Qty</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var p in pairs)
                                                        {
                                                            <tr>
                                                                <td>@p.name</td>
                                                                <td class="text-end">@p.qty</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            rendered = true;
                                        }
                                    }

                                    // Returned items; Charges=X; LostDamaged=[Name:Lx Dy, ...]
                                    if (!rendered && details.StartsWith("Returned items", StringComparison.OrdinalIgnoreCase))
                                    {
                                        decimal chargesVal = 0m;
                                        var chIdx = details.IndexOf("Charges=", StringComparison.OrdinalIgnoreCase);
                                        if (chIdx >= 0)
                                        {
                                            var after = details.Substring(chIdx + "Charges=".Length);
                                            var end = after.IndexOf(';');
                                            var numStr = (end >= 0 ? after.Substring(0, end) : after).Trim();
                                            decimal.TryParse(numStr, out chargesVal);
                                        }

                                        var ldStart = details.IndexOf("LostDamaged=[", StringComparison.OrdinalIgnoreCase);
                                        var ldItems = new System.Collections.Generic.List<(string name, int L, int D)>();
                                        if (ldStart >= 0)
                                        {
                                            var afterLd = details.Substring(ldStart + "LostDamaged=[".Length);
                                            var closeIdx = afterLd.IndexOf(']');
                                            var inner = closeIdx >= 0 ? afterLd.Substring(0, closeIdx) : afterLd;
                                            var entries = inner.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                            foreach (var e in entries)
                                            {
                                                var entry = e.Trim();
                                                var colon = entry.IndexOf(':');
                                                if (colon > 0)
                                                {
                                                    var name = entry.Substring(0, colon).Trim();
                                                    var rest = entry.Substring(colon + 1).Trim();
                                                    int l = 0, d = 0;
                                                    var parts = rest.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                                                    foreach (var part in parts)
                                                    {
                                                        if (part.StartsWith("L")) int.TryParse(part.Substring(1), out l);
                                                        if (part.StartsWith("D")) int.TryParse(part.Substring(1), out d);
                                                    }
                                                    ldItems.Add((name, l, d));
                                                }
                                            }
                                        }

                                        <div class="small">
                                            <div class="fw-semibold mb-1">Returned Materials</div>
                                            <div class="mb-2">Charges: ₱@chargesVal.ToString("N2")</div>
                                            @if (ldItems.Count > 0)
                                            {
                                                <table class="table table-sm table-bordered mb-0">
                                                    <thead>
                                                        <tr>
                                                            <th>Material</th>
                                                            <th class="text-end">Lost</th>
                                                            <th class="text-end">Damaged</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var it in ldItems)
                                                        {
                                                            <tr>
                                                                <td>@it.name</td>
                                                                <td class="text-end">@it.L</td>
                                                                <td class="text-end">@it.D</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            }
                                        </div>
                                        rendered = true;
                                    }

                                    if (!rendered)
                                    {
                                        <div style="white-space: pre-line;">@details</div>
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
@section Scripts {
    <script>
        (function () {
            var tz = document.getElementById('tzOffset');
            if (tz) tz.value = new Date().getTimezoneOffset();
            var form = document.getElementById('filterForm');
            if (form) {
                form.addEventListener('submit', function () {
                    if (tz) tz.value = new Date().getTimezoneOffset();
                });
            }
            // Convert UTC timestamps to user's local date
            document.querySelectorAll('.ts').forEach(function (el) {
                var iso = el.getAttribute('data-utc');
                if (!iso) return;
                var d = new Date(iso);
                if (isNaN(d.getTime())) return;
                // Format as locale date (no time)
                el.textContent = d.toLocaleDateString();
                el.title = 'UTC: ' + d.toUTCString();
            });
                // Remove purple highlight when the highlighted row or its details are interacted with
             var highlightedRows = document.querySelectorAll('.main-row.row-highlight-purple');
             highlightedRows.forEach(function (row) {
                             function clearHighlight() {
                                 row.classList.remove('row-highlight-purple');
                             }
            
                             // Click anywhere on the row
                             row.addEventListener('click', clearHighlight, { once: true });
            
                             // Click on the details toggle button
                             var toggleBtn = row.querySelector('.toggle-btn');
                             if (toggleBtn) {
                                 toggleBtn.addEventListener('click', clearHighlight, { once: true });
                                 toggleBtn.addEventListener('keydown', function (e) {
                                     if (e && (e.key === 'Enter' || e.key === ' ')) clearHighlight();
                                 }, { once: true });
                             }
            
                             // When the related collapse opens
                             if (toggleBtn) {
                                 var target = toggleBtn.getAttribute('data-bs-target');
                                 if (target) {
                                     var panel = document.querySelector(target);
                                     if (panel) {
                                         panel.addEventListener('show.bs.collapse', clearHighlight, { once: true });
                                     }
                                 }
                             }
             });
        })();
    </script>
}
    <div class="d-flex gap-2">
        <a class="btn btn-outline-secondary" href="?page=@(Math.Max(1, (int)ViewBag.Page - 1))&pageSize=@ViewBag.PageSize&username=@Context.Request.Query["username"]&orderNumber=@Context.Request.Query["orderNumber"]&filterDate=@Context.Request.Query["filterDate"]">Prev</a>
        <a class="btn btn-outline-secondary" href="?page=@((int)ViewBag.Page + 1)&pageSize=@ViewBag.PageSize&username=@Context.Request.Query["username"]&orderNumber=@Context.Request.Query["orderNumber"]&filterDate=@Context.Request.Query["filterDate"]">Next</a>
        <div class="ms-2 align-self-center">Total: @ViewBag.Total</div>
    </div>
</div>


