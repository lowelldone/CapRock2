@model Capstone2.Models.Order
@{
    ViewData["Title"] = "Edit Food Items";
    var menus = ViewBag.Menus as List<Capstone2.Models.Menu>;
    bool isPackageOrder = Model?.OrderDetails?.Any(od => od.MenuPackageId != null) == true;
    decimal packagePrice = 0m;
    if (isPackageOrder)
    {
        packagePrice = Model.OrderDetails.FirstOrDefault(od => od.MenuPackageId != null && od.PackagePrice != null)?.PackagePrice ?? 0m;
    }
    decimal packageBaseTotal = isPackageOrder ? packagePrice * Model.NoOfPax : 0m;
    bool isRush = Model.OrderDate.Date == Model.CateringDate.Date;
    decimal rushFee = isPackageOrder && isRush ? packageBaseTotal * 0.10m : 0m;
    decimal packageRushTotal = isPackageOrder ? packageBaseTotal + rushFee : 0m;
    var existingMenuIds = Model.OrderDetails.Select(od => od.MenuId).ToHashSet();
}

<style>
    body, .container, .card, .btn, h1, h2, h3, h4, h5, h6, p, label, input, textarea, select {
        font-family: 'Segoe UI', sans-serif;
    }

    .edit-bg {
        background: linear-gradient(135deg, #f8fafc 60%, #e0e7ef 100%);
        min-height: 100vh;
        border-radius: 24px;
        padding-bottom: 2rem;
    }

    .edit-header {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .edit-header-icon {
        font-size: 2.5rem;
        color: #0d6efd;
        background: #e0f2fe;
        border-radius: 12px;
        padding: 8px 14px;
        box-shadow: 0 2px 8px rgba(13,110,253,0.08);
    }

    .edit-subtitle {
        color: #6c757d;
        font-size: 1.1rem;
        margin-top: -8px;
        margin-bottom: 18px;
    }

    .edit-card {
        background: #fff;
        border-radius: 20px;
        box-shadow: 0 4px 24px 0 rgba(34, 41, 47, 0.08);
        padding: 2rem;
        margin-bottom: 1.5rem;
    }

    .table {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

        .table thead th {
            background: #f8fafc;
            border: none;
            font-weight: 600;
            color: #344767;
            padding: 1rem;
        }

        .table tbody td {
            padding: 1rem;
            border: none;
            border-bottom: 1px solid #f1f5f9;
        }

        .table tbody tr:nth-child(even) {
            background: #f8fafc;
        }

        .table tbody tr:hover {
            background: #e0f2fe;
        }

    .form-control, .form-select {
        border-radius: 12px;
        border: 1px solid #e0e7ef;
        padding: 0.75rem 1rem;
        font-size: 1rem;
    }

        .form-control:focus, .form-select:focus {
            border-color: #6476f8;
            box-shadow: 0 0 0 0.2rem rgba(100, 118, 248, 0.25);
        }

    .btn-save {
        font-weight: 600;
        font-size: 1.1rem;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        box-shadow: 0 2px 8px 0 rgba(100, 118, 248, 0.10);
    }

    .btn-cancel {
        font-weight: 500;
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

    .btn-add {
        font-weight: 500;
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

    .btn-remove {
        font-weight: 500;
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

    /* Align action column consistently */
    .action-col {
        width: 160px;
        text-align: right;
        white-space: nowrap;
    }
    .table td.action-col, .table th.action-col {
        vertical-align: middle;
    }

    .total-section {
        background: #f8fafc;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1.5rem 0;
    }

    .add-section {
        background: #f8fafc;
        border-radius: 12px;
        padding: 1.5rem;
        margin-top: 1.5rem;
    }
</style>

<div class="container-fluid mt-4 px-4 edit-bg">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
            <div class="edit-header mb-1">
                <span class="edit-header-icon"><i class="bi bi-list-ul"></i></span>
                <h2 class="fw-bold mb-0">Edit Food Items</h2>
            </div>
            <div class="edit-subtitle">Modify food items for @Model.Customer.Name</div>
        </div>
    </div>

    <div class="edit-card">
        <form asp-action="Edit" asp-route-orderId="@Model.OrderId" method="post">
            @if (isPackageOrder)
            {
                var dishTypes = new[] { "MAINDISH", "SIDEDISH", "DESSERTS", "RICE", "SOFTDRINKS" }; 
                var typeTitles = new Dictionary<string, string> { {"MAINDISH","Main Dishes"}, {"SIDEDISH","Side Dishes"}, {"DESSERTS","Desserts"}, {"RICE","Rice"}, {"SOFTDRINKS","Soft Drinks"} }; 
                var indexCounter = 0; 

                @foreach (var dt in dishTypes)
                {
                    var itemsForType = Model.OrderDetails
                        .Where(od => (od.Menu?.DishType ?? "") == dt)
                        .OrderBy(od => od.Menu?.Category)
                        .ThenBy(od => od.Name)
                        .ToList();

                    <div class="mb-4">
                        <h5 class="fw-bold mb-2 text-primary">@typeTitles[dt]</h5>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Menu</th>
                                    <th class="action-col text-end">Action</th>
                                </tr>
                            </thead>
                            <tbody class="order-details-body" id="tbody-@dt">
                                @if (!itemsForType.Any())
                                {
                                    <tr class="text-muted"><td colspan="2"><em>No items.</em></td></tr>
                                }
                                else
                                {
                                    var groups = itemsForType
                                        .GroupBy(it => it.Menu?.Category ?? "")
                                        .OrderBy(g => g.Key);
                                    foreach (var grp in groups)
                                    {
                                        <tr class="table-light" data-category-header="@grp.Key">
                                            <td colspan="2" class="fw-semibold">@grp.Key</td>
                                        </tr>
                                        foreach (var item in grp)
                                        {
                                            <tr>
                                                <td>
                                                    <input type="hidden" name="orderDetails[@indexCounter].OrderDetailId" value="@item.OrderDetailId" />
                                                    <input type="hidden" name="orderDetails[@indexCounter].MenuId" value="@item.MenuId" />
                                                    <input type="hidden" name="orderDetails[@indexCounter].Name" value="@item.Name" />
                                                    <input type="hidden" name="orderDetails[@indexCounter].Quantity" value="1" />
                                                    <input type="hidden" name="orderDetails[@indexCounter].IsFreeLechon" value="@(item.IsFreeLechon ? "true" : "false")" />
                                                    @item.Name
                                                </td>
                                                <td class="action-col text-end">
                                                    @if (!item.IsFreeLechon)
                                                    {
                                                        <button type="button" class="btn btn-danger btn-remove" onclick="removeRow(this)">
                                                            <i class="bi bi-trash me-1"></i>Remove
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                            indexCounter++;
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Menu</th>
                            <th>Quantity</th>
                            <th class="action-col text-end">Action</th>
                        </tr>
                    </thead>
                    <tbody id="orderDetailsBody">
                        @for (int i = 0; i < Model.OrderDetails.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input type="hidden" name="orderDetails[@i].OrderDetailId" value="@Model.OrderDetails[i].OrderDetailId" />
                                    <input type="hidden" name="orderDetails[@i].MenuId" value="@Model.OrderDetails[i].MenuId" />
                                    <input type="hidden" name="orderDetails[@i].Name" value="@Model.OrderDetails[i].Name" />
                                    @Model.OrderDetails[i].Name
                                </td>
                                <td>
                                    <input type="number" name="orderDetails[@i].Quantity" value="@Model.OrderDetails[i].Quantity" min="1" class="form-control" />
                                </td>
                                <td class="action-col text-end">
                                    <button type="button" class="btn btn-danger btn-remove" onclick="removeRow(this)">
                                        <i class="bi bi-trash me-1"></i>Remove
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <div class="total-section">
                <h5 class="fw-bold mb-0">
                    Total Payment: ₱<span id="totalPayment">0.00</span>
                </h5>
            </div>

            <div class="add-section">
                <h5 class="fw-bold mb-3">Add Menu Item</h5>
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Select Menu</label>
                        <select id="menuSelect" class="form-select">
                            <option value="">-- Select Menu --</option>
                            @{
                                var groupedMenus = menus
                                    .OrderBy(m => m.DishType)
                                    .ThenBy(m => m.Category)
                                    .ThenBy(m => m.Name)
                                    .GroupBy(m => new { m.DishType, m.Category });
                            }
                            @foreach (var group in groupedMenus)
                            {
                                var label = $"{group.Key.DishType} - {group.Key.Category}";
                                <optgroup label="@label">
                                    @foreach (var menu in group)
                                    {
                                        if (!isPackageOrder || (isPackageOrder && !existingMenuIds.Contains(menu.MenuId)))
                                        {
                                            <option value="@menu.MenuId" data-name="@menu.Name" data-type="@menu.DishType">@menu.Name</option>
                                        }
                                    }
                                </optgroup>
                            }
                        </select>
                    </div>
                    @if (!isPackageOrder)
                    {
                        <div class="col-md-3">
                            <label class="form-label fw-semibold">Quantity</label>
                            <input type="number" id="menuQuantity" class="form-control" placeholder="Quantity" min="1" value="1" />
                        </div>
                    }
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="button" class="btn btn-success btn-add" onclick="addMenuItem()">
                            <i class="bi bi-plus-lg me-1"></i>Add Item
                        </button>
                    </div>
                </div>
            </div>

            <div class="d-flex gap-3 mt-4">
                <button type="submit" class="btn btn-primary btn-save">
                    <i class="bi bi-check-lg me-2"></i>Save Changes
                </button>
                <a asp-controller="Customers" asp-action="ViewOrder" asp-route-id="@Model.Customer.CustomerID" class="btn btn-outline-secondary btn-cancel">
                    <i class="bi bi-x-lg me-2"></i>Cancel
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        var isPackage = @(isPackageOrder.ToString().ToLower());
        var isRush = @(isRush.ToString().ToLower());
        function removeRow(btn) {
            $(btn).closest('tr').remove();
            // Re-index all rows
            if (isPackage) {
                var idx = 0;
                $('tbody.order-details-body tr').each(function () {
                    var $row = $(this);
                    if ($row.attr('data-category-header')) return; // skip category headers
                    $row.find('input, select').each(function () {
                        var name = $(this).attr('name');
                        if (name) {
                            var newName = name.replace(/orderDetails\[\d+\]/, 'orderDetails[' + idx + ']');
                            $(this).attr('name', newName);
                        }
                    });
                    idx++;
                });
            } else {
                $('#orderDetailsBody tr').each(function (i, row) {
                    $(row).find('input, select').each(function () {
                        var name = $(this).attr('name');
                        if (name) {
                            var newName = name.replace(/orderDetails\[\d+\]/, 'orderDetails[' + i + ']');
                            $(this).attr('name', newName);
                        }
                    });
                });
            }
            recalculateTotal(); // Call recalculateTotal after removing a row
        }
        function addMenuItem() {
            var menuId = $('#menuSelect').val();
            var $opt = $('#menuSelect option:selected');
            var menuName = $opt.data('name');
            if (!menuId) return;

            if (isPackage) {
                // Determine target table based on dish type of selected menu
                var dishType = $opt.data('type');
                var $targetBody = $('#tbody-' + dishType);
                if ($targetBody.length === 0) {
                    $('#menuSelect').val('');
                    return;
                }
                // Prevent adding duplicates only within the target dish table
                var existingPkg = $targetBody.find('input[name*=".MenuId"][value="' + menuId + '"]');
                if (existingPkg.length) {
                    $('#menuSelect').val('');
                    return;
                }
                var index = $('tbody.order-details-body tr').filter(function () { return !$(this).attr('data-category-header'); }).length; // global index excluding headers
                var row = '<tr>' +
                    '<td>' +
                    '<input type="hidden" name="orderDetails[' + index + '].OrderDetailId" value="0" />' +
                    '<input type="hidden" name="orderDetails[' + index + '].MenuId" value="' + menuId + '" />' +
                    '<input type="hidden" name="orderDetails[' + index + '].Name" value="' + menuName + '" />' +
                    '<input type="hidden" name="orderDetails[' + index + '].Quantity" value="1" />' +
                    '<input type="hidden" name="orderDetails[' + index + '].IsFreeLechon" value="false" />' +
                    menuName +
                    '</td>' +
                    '<td class="action-col text-end"><button type="button" class="btn btn-danger btn-remove" onclick="removeRow(this)">' +
                    '<i class="bi bi-trash me-1"></i>Remove' +
                    '</button></td>' +
                    '</tr>';
                $targetBody.find('tr.text-muted').remove();
                $targetBody.append(row);
                $('#menuSelect').val('');
                recalculateTotal();
                return;
            }

            // Non-package: allow duplicates by merging quantity
                var existing = $('#orderDetailsBody input[name*=".MenuId"][value="' + menuId + '"]');
                if (existing.length) {
                    var $row = existing.closest('tr');
                    var $qty = $row.find('input[name*=".Quantity"]');
                    var addQty = parseInt($('#menuQuantity').val(), 10) || 1;
                    var cur = parseInt($qty.val(), 10) || 0;
                    $qty.val(cur + addQty);
                    $('#menuSelect').val('');
                    $('#menuQuantity').val(1);
                    recalculateTotal();
                    return;
                }
            var idx = $('#orderDetailsBody tr').length;
            var qtyCell = '<td><input type="number" name="orderDetails[' + idx + '].Quantity" value="' + (parseInt($("#menuQuantity").val(), 10) || 1) + '" min="1" class="form-control" /></td>';
            var row2 = '<tr>' +
                '<td>' +
                '<input type="hidden" name="orderDetails[' + idx + '].OrderDetailId" value="0" />' +
                '<input type="hidden" name="orderDetails[' + idx + '].MenuId" value="' + menuId + '" />' +
                '<input type="hidden" name="orderDetails[' + idx + '].Name" value="' + menuName + '" />' +
                '<input type="hidden" name="orderDetails[' + idx + '].IsFreeLechon" value="false" />' +
                menuName +
                '</td>' +
                qtyCell +
                '<td class="action-col text-end"><button type="button" class="btn btn-danger btn-remove" onclick="removeRow(this)">' +
                '<i class="bi bi-trash me-1"></i>Remove' +
                '</button></td>' +
                '</tr>';
            $('#orderDetailsBody').append(row2);
                $('#menuSelect').val('');
                $('#menuQuantity').val(1);
                recalculateTotal();
            }

        // Create menu data object
        var menuData = {};
        @foreach (var menu in menus)
        {
            <text>
                    menuData[@menu.MenuId] = @menu.Price;
            </text>
        }

            function recalculateTotal() {
                var base = @((isPackageOrder ? packageBaseTotal : 0m).ToString(System.Globalization.CultureInfo.InvariantCulture));
                var rushFee = @((isPackageOrder ? rushFee : 0m).ToString(System.Globalization.CultureInfo.InvariantCulture));
                if (@(isPackageOrder.ToString().ToLower())) {
                    // Package orders: total is package base plus rush fee when applicable
                    var totalPkg = base + (@(isRush.ToString().ToLower()) ? rushFee : 0);
                    $('#totalPayment').text(totalPkg.toFixed(2));
                    return;
                }
                var total = 0;
                $('#orderDetailsBody tr').each(function () {
                    var menuId = parseInt($(this).find('input[name*=".MenuId"]').val());
                    var quantity = parseInt($(this).find('input[name*=".Quantity"]').val()) || 0;
                    var price = menuData[menuId] || 0;
                    total += price * quantity;
                });
                $('#totalPayment').text(total.toFixed(2));
            }

        $(function () {
            recalculateTotal();
        });

        // Recalculate total when quantity changes (only for non-package)
        $('#orderDetailsBody').on('input', 'input[name*=".Quantity"]', function () {
            recalculateTotal();
        });

        // Recalculate total when page loads
        $(document).ready(function () {
            recalculateTotal();
        });
    </script>
} 