@model Capstone2.Models.Order
@{
    // serialize initial items into a JS array
    var items = ViewBag.SelectedItems as List<Capstone2.Models.OrderDetail>;
    var initJson = System.Text.Json.JsonSerializer.Serialize(
        items.Select(x => new
        {
            MenuId = x.MenuId,
            Name = x.Name,
            Quantity = x.Quantity,
            price = x.Menu.Price
        })
    );
}
<h2>Review Selected Foods</h2>

<table class="table" id="food-table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Qty</th>
            <th>Price</th>
            <th>Subtotal</th>
        </tr>
    </thead>
    <tbody></tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-end"><strong>Total:</strong></td>
            <td colspan="2" id="total">0.00</td>
        </tr>
    </tfoot>
</table>

<div class="d-flex gap-2">

    <!-- BACK button: will POST the cart back to ClientMenus/Index -->
    <form id="backForm" method="post" action="/ClientMenus/Index">
        @* carry the JSON payload back *@
        <input type="hidden" name="OrderItemsJson" id="backItemsJson" />
        <button type="submit" class="btn btn-secondary">← Order More </button>
    </form>

    <!-- NEXT button: confirm & go forward -->
    <button id="confirmBtn" class="btn btn-primary ms-auto">Next →</button>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // keep cart entirely in JS
        let cartItems = @Html.Raw(initJson)

        function renderTable() {
            const $tbody = $('#food-table tbody').empty();
            let total = 0;
            cartItems.forEach(item => {
                const subtotal = item.Quantity * item.price;
                total += subtotal;
                $tbody.append(`
                            <tr data-id="${item.MenuId}">
                                <td>${item.Name}</td>
                                <td class="qty">${item.Quantity}</td>
                                <td>${item.price.toFixed(2)}</td>
                                <td class="subtotal">${subtotal.toFixed(2)}</td>
                                <td>
                                </td>
                            </tr>
                        `);
            });
            $('#total').text(total.toFixed(2));
        }

        // on + or −
        $(document).on('click', '.update', function () {
            const $row = $(this).closest('tr');
            const id = $row.data('id');
            const act = $(this).data('action');

            cartItems = cartItems.map(item => {
                if (item.MenuId === id) {
                    if (act === 'add') item.Quantity++;
                    if (act === 'minus' && item.Quantity > 1) item.Quantity--;
                }
                return item;
            });
            renderTable();
        });

        // on remove
        $(document).on('click', '.remove', function () {
            const id = $(this).closest('tr').data('id');
            cartItems = cartItems.filter(item => item.MenuId !== id);
            renderTable();
        });

        // initial render
        renderTable();

        // Set OrderItemsJson when going back to menu
        $('#backForm').on('submit', function () {
            $('#backItemsJson').val(JSON.stringify(cartItems));
        });

        // on confirm, POST JSON to server
        $('#confirmBtn').on('click', function () {
            $.ajax({
                url: '/SelectedFoods/Index',
                method: 'POST',
                data: {
                    OrderItemsJson: JSON.stringify(cartItems),
                    isConfirmed: true
                },
                success: function (data) {
                    if (data.success) {
                        window.location.href = '/Orders/Form';
                    }
                }
            });
        });
    </script>
}