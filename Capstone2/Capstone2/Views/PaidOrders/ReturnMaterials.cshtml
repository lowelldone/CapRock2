@model Capstone2.Models.ReturnMaterialsViewModel

@{
    ViewData["Title"] = "Return Materials";
}

<h2>Return Materials for Order</h2>

<form asp-action="ReturnMaterials" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="OrderId" value="@Model.OrderId" />
    <input type="hidden" name="CustomerId" value="@Model.CustomerId" />
    <table class="table">
        <thead>
            <tr>
                <th>Material</th>
                <th>Pulled Out</th>
                <th>Returned</th>
                <th>Lost</th>
                <th>Damaged</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Items.Count; i++)
            {
                <tr>
                    <td>
                        @Model.Items[i].MaterialName
                        <input type="hidden" name="Items[@i].MaterialId" value="@Model.Items[i].MaterialId" />
                    </td>
                    <td id="pulledOut_@i">@Model.Items[i].PulledOut</td>
                    <td>
                        <input type="number" name="Items[@i].Returned" id="returned_@i" value="@Model.Items[i].PulledOut" min="0" max="@Model.Items[i].PulledOut" class="form-control" readonly />
                    </td>
                    <td>
                        <input type="number" name="Items[@i].Lost" id="lost_@i" value="0" min="0" max="@Model.Items[i].PulledOut" class="form-control" oninput="updateReturned(@i)" />
                    </td>
                    <td>
                        <input type="number" name="Items[@i].Damaged" id="damaged_@i" value="0" min="0" max="@Model.Items[i].PulledOut" class="form-control" oninput="updateReturned(@i)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button type="submit" class="btn btn-primary">Confirm Return</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

<script>
    function updateReturned(i) {
        var pulledOut = parseInt(document.getElementById('pulledOut_' + i).textContent) || 0;
        var lost = parseInt(document.getElementById('lost_' + i).value) || 0;
        var damaged = parseInt(document.getElementById('damaged_' + i).value) || 0;
        var returned = pulledOut - (lost + damaged);
        if (returned < 0) returned = 0;
        document.getElementById('returned_' + i).value = returned;
    }
</script> 