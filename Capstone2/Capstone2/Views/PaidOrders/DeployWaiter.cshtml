@model Capstone2.Models.Order
@{
    ViewData["Title"] = "Assign Waiter";
    var waiters = ViewBag.Waiters as List<Capstone2.Models.Waiter>;
    bool isHeadWaiter = ViewBag.IsHeadWaiter ?? false;
}

<link rel="stylesheet" href="~/css/modern-ui.css" />

<style>
    /* Enhanced Waiter Selection Design */
    .waiter-selection-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        padding: 1.5rem;
        border: 2px solid var(--purple-border);
        box-shadow: 0 8px 32px rgba(124, 58, 237, 0.1);
        transition: all 0.3s ease;
    }

        .waiter-selection-container:hover {
            border-color: var(--primary-purple);
            box-shadow: 0 12px 40px rgba(124, 58, 237, 0.15);
        }

    .waiter-select {
        border: 2px solid var(--purple-border);
        border-radius: 12px;
        background: linear-gradient(135deg, #faf5ff 0%, #f3e8ff 100%);
        font-family: 'Inter', sans-serif;
        font-size: 0.95rem;
        line-height: 1.6;
        min-height: 200px;
        transition: all 0.3s ease;
    }

        .waiter-select:focus {
            border-color: var(--primary-purple);
            box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
            background: white;
        }

    .waiter-option {
        padding: 0.75rem 1rem;
        margin: 0.25rem 0;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid transparent;
        background: rgba(255, 255, 255, 0.7);
    }

        .waiter-option:hover {
            background: rgba(124, 58, 237, 0.1);
            border-color: var(--purple-border);
            transform: translateX(4px);
        }

        .waiter-option:checked {
            background: linear-gradient(135deg, var(--primary-purple) 0%, var(--primary-purple-dark) 100%);
            color: white;
            border-color: var(--primary-purple);
            box-shadow: 0 4px 12px rgba(124, 58, 237, 0.3);
        }

            .waiter-option:checked:hover {
                background: linear-gradient(135deg, var(--primary-purple-dark) 0%, var(--text-purple) 100%);
                transform: translateX(4px) scale(1.02);
            }

    /* Waiter Selection Info Section */
    .waiter-selection-info {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        margin-top: 1.5rem;
        padding: 1.25rem;
        background: linear-gradient(135deg, var(--purple-bg-light) 0%, var(--purple-bg) 100%);
        border-radius: 12px;
        border: 1px solid var(--purple-border);
    }

    .info-icon {
        font-size: 1.5rem;
        color: var(--primary-purple);
        background: white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        box-shadow: 0 4px 12px rgba(124, 58, 237, 0.2);
    }

    .info-text {
        flex: 1;
        color: var(--text-purple);
    }

        .info-text strong {
            display: block;
            margin-bottom: 0.75rem;
            font-size: 1rem;
            color: var(--text-purple);
        }

    .info-list {
        margin: 0;
        padding-left: 1.25rem;
        list-style: none;
    }

        .info-list li {
            margin-bottom: 0.5rem;
            position: relative;
            padding-left: 0.5rem;
            font-size: 0.9rem;
            line-height: 1.5;
        }

            .info-list li:before {
                content: "•";
                color: var(--primary-purple);
                font-weight: bold;
                position: absolute;
                left: -0.75rem;
            }

            .info-list li:last-child {
                margin-bottom: 0;
            }

        .info-list kbd {
            background: rgba(124, 58, 237, 0.1);
            border: 1px solid var(--purple-border);
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
            font-family: 'Courier New', monospace;
            color: var(--primary-purple);
            font-weight: 600;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .waiter-selection-container {
            padding: 1rem;
        }

        .waiter-selection-info {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .info-icon {
            margin-bottom: 0.5rem;
        }
    }

    .modern-form-label {
        display: block;
        font-weight: 700;
        color: var(--text-purple);
        margin-bottom: 1rem;
        font-size: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        background: linear-gradient(135deg, var(--primary-purple) 0%, var(--primary-purple-dark) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 2px 4px rgba(124, 58, 237, 0.1);
    }

        .modern-form-label i {
            margin-right: 0.5rem;
            color: var(--primary-purple);
            -webkit-text-fill-color: var(--primary-purple);
        }
</style>

<div class="container-fluid modern-bg">
    @if (TempData["Success"] != null)
    {
        <div class="modern-alert modern-alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["Success"]
        </div>
    }
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-start mb-4">
        <div class="modern-header">
            <div class="modern-header-icon">
                <i class="bi bi-people"></i>
            </div>
            <div>
                <h1 class="modern-title">Assign Waiter to Order</h1>
                <p class="modern-subtitle">Select waiters to manage this order.</p>
            </div>
        </div>
    </div>

    <!-- Waiter Assignment Form Card -->
    <div class="modern-status-card">
        <div class="modern-status-card-header">
            <h5 class="modern-status-card-title">
                <i class="bi bi-person-plus"></i>
                Waiter Assignment
            </h5>
        </div>
        <div class="modern-card-body">
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="modern-alert modern-alert-danger">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div>@error.ErrorMessage</div>
                    }
                </div>
            }

            <form asp-action="DeployWaiter" asp-route-id="@Model.CustomerID" method="post">
                <div class="modern-form-group">
                    <label for="waiterIds" class="modern-form-label">
                        <i class="bi bi-people-fill me-2"></i>
                        SELECT WAITERS
                    </label>
                    <div class="waiter-selection-container">
                        <select id="waiterIds" name="waiterIds" class="modern-form-control waiter-select" multiple size="6" required>
                            @foreach (var w in waiters)
                            {
                            // only available waiters go in the select list
                                <option value="@w.WaiterId" class="waiter-option">
                                    <span class="waiter-name">@w.User.FirstName @w.User.LastName</span>
                                    <span class="waiter-username">(@w.User.Username)</span>
                                    <span class="waiter-status">[@w.Availability]</span>
                                </option>
                            }
                        </select>
                        <div class="waiter-selection-info">
                            <div class="info-icon">
                                <i class="bi bi-info-circle"></i>
                            </div>
                            <div class="info-text">
                                <strong>Selection Tips:</strong>
                                <ul class="info-list">
                                    <li>Hold <kbd>Ctrl</kbd> (Windows) or <kbd>Cmd</kbd> (Mac) to select multiple waiters</li>
                                    <li>Click on a waiter to select/deselect them</li>
                                    <li>Selected waiters will be highlighted</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex gap-3">
                    <button type="submit" class="modern-action-btn btn-primary">
                        <i class="bi bi-check-lg me-2"></i>Assign Waiters
                    </button>
                    <a asp-action="Index" class="modern-action-btn btn-outline-secondary">
                        <i class="bi bi-x-lg me-2"></i>Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>

    @if (((List<int>)ViewBag.AssignedWaiterIds).Count > 0)
    {
        <!-- Currently Assigned Waiters Card -->
        <div class="modern-status-card">
            <div class="modern-status-card-header">
                <h5 class="modern-status-card-title">
                    <i class="bi bi-people-fill"></i>
                    Currently Assigned Waiters
                </h5>
            </div>
            <div class="modern-card-body">
                @{
                    var assigned = ViewBag.AssignedWaiters as List<Capstone2.Models.Waiter>;
                }
                @if (assigned != null)
                {
                    <div class="table-responsive">
                        <table class="modern-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Availability</th>
                                    @if (!isHeadWaiter)
                                    {
                                        <th class="text-end">Actions</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var w in assigned)
                                {
                                    <tr>
                                        <td>
                                            <div class="modern-name">@w.User.FirstName @w.User.LastName</div>
                                        </td>
                                        <td>
                                            <span class="modern-status-badge @(w.Availability == "Available" ? "accepted" : w.Availability == "Busy" ? "settling" : "pending")">
                                                @w.Availability
                                            </span>
                                        </td>
                                        @if (!isHeadWaiter)
                                        {
                                            <td class="text-end">
                                                <form asp-action="RemoveAssignedWaiter" asp-route-id="@Model.CustomerID" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="waiterId" value="@w.WaiterId" />
                                                    <button type="submit" class="modern-table-action-btn btn-outline-danger">
                                                        <i class="bi bi-x-circle"></i> Remove
                                                    </button>
                                                </form>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div> 