@model IEnumerable<Capstone2.Models.Customer>

@{
    ViewData["Title"] = "Manage Orders";
    string selectedFilter = Context.Request.Query["statusFilter"];

    string[] status = ["Accepted", "Ongoing", "Completed"];
    int? headWaiterId = null;
    if (Context.Request.Query["headWaiterId"].Count > 0)
    {
        headWaiterId = Convert.ToInt32(Context.Request.Query["headWaiterId"]);
    }

    bool isAdmin = ViewBag.IsAdmin ?? false;
}

<style>
    :root {
        --primary-purple: #7c3aed;
        --primary-purple-dark: #6d28d9;
        --primary-purple-light: #a78bfa;
        --secondary-purple: #8b5cf6;
        --accent-purple: #c084fc;
        --purple-bg: #faf5ff;
        --purple-bg-light: #f3e8ff;
        --purple-border: #e9d5ff;
        --text-purple: #581c87;
        --text-purple-light: #7c3aed;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --info-color: #3b82f6;
    }

    body, .container-fluid, .card, .table {
        font-family: 'Segoe UI', sans-serif;
    }

    .paidorders-bg {
        background: linear-gradient(135deg, var(--purple-bg) 0%, var(--purple-bg-light) 50%, #f8fafc 100%);
        min-height: 100vh;
        border-radius: 24px;
        padding-bottom: 2rem;
    }

    .paidorders-header {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .paidorders-header-icon {
        font-size: 2.5rem;
        color: var(--primary-purple);
        background: var(--purple-bg-light);
        border-radius: 12px;
        padding: 8px 14px;
        box-shadow: 0 4px 16px rgba(124, 58, 237, 0.15);
        border: 1px solid var(--purple-border);
    }

    .paidorders-subtitle {
        color: var(--text-purple-light);
        font-size: 1.1rem;
        margin-top: -8px;
        margin-bottom: 18px;
    }

    .card {
        border-radius: 20px !important;
        box-shadow: 0 8px 32px 0 rgba(124, 58, 237, 0.1);
        border: 1px solid var(--purple-border);
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 12px 40px 0 rgba(124, 58, 237, 0.15);
            transform: translateY(-2px);
        }

    .table {
        border-radius: 16px;
        overflow: hidden;
        background: #fff;
        box-shadow: 0 4px 16px 0 rgba(124, 58, 237, 0.1);
    }

        .table thead th {
            background: linear-gradient(135deg, var(--purple-bg-light) 0%, var(--purple-bg) 100%);
            font-size: 1.15rem;
            font-weight: 700;
            color: var(--text-purple);
            border-bottom: 2px solid var(--purple-border);
        }

        .table tbody tr:nth-child(even) {
            background: var(--purple-bg);
        }

        .table tbody tr:hover {
            background: var(--purple-bg-light);
            transition: all 0.3s ease;
            transform: scale(1.01);
        }

    .action-btn {
        border-radius: 8px;
        font-size: 1rem;
        padding: 6px 16px;
        margin-left: 2px;
        margin-right: 2px;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

        .action-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(124, 58, 237, 0.2);
        }

        .action-btn i {
            margin-right: 4px;
        }
    /* Status badge enhancements */
    .badge.bg-success {
        background: var(--success-color) !important;
    }

    .badge.bg-warning {
        background: var(--warning-color) !important;
    }

    .badge.bg-danger {
        background: var(--danger-color) !important;
    }

    .badge.bg-info {
        background: var(--info-color) !important;
    }
    /* Alert enhancements */
    .alert-success {
        background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
        border: 1px solid var(--success-color);
        color: #065f46;
        border-radius: 12px;
    }

    .alert-danger {
        background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
        border: 1px solid var(--danger-color);
        color: #991b1b;
        border-radius: 12px;
    }
</style>

<div class="container-fluid mt-4 px-4 paidorders-bg">
    @if (TempData["ProfileError"] != null)
    {
        <div class="alert alert-danger">@TempData["ProfileError"]</div>
    }
    @if (TempData["ProfileSuccess"] != null)
    {
        <div class="alert alert-success">@TempData["ProfileSuccess"]</div>
    }
    @if (TempData["PullOutSuccess"] != null)
    {
        <div class="alert alert-success">@TempData["PullOutSuccess"]</div>
    }
    @if (TempData["ReturnSuccess"] != null)
    {
        <div class="alert alert-success">@TempData["ReturnSuccess"]</div>
    }

    <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
            <div class="paidorders-header mb-1">
                <span class="paidorders-header-icon">
                    @if (isAdmin)
                    {
                        <i class="bi bi-person-check"></i>
                    }
                    else
                    {
                        <i class="bi bi-receipt"></i>
                    }
                </span>
                <h2 class="fw-bold mb-0">
                    @if (isAdmin)
                    {
                        @:Assign Staffs
                    }
                    else
                    {
                        @:Manage Orders
                    }
                </h2>
            </div>
            <div class="paidorders-subtitle">
                @if (isAdmin)
                {
                    @:View accepted orders and assign headwaiters to manage them.
                }
                else
                {
                    @:View and manage your assigned catering orders here.
                }
            </div>
        </div>
        <div class="d-flex gap-2">
            <i class="bi bi-person-circle header-icon" onclick="openProfileModal()" style="cursor: pointer; font-size: 1.5rem; color: #6b7280; padding: 0.5rem; border-radius: 8px; transition: all 0.3s ease;" onmouseover="this.style.background='var(--purple-bg-light)'; this.style.color='var(--primary-purple)'" onmouseout="this.style.background='transparent'; this.style.color='#6b7280'"></i>
        </div>
    </div>

    <div class="card mb-4 shadow-sm border-0 rounded-4">
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                @if (!isAdmin && headWaiterId.HasValue)
                {
                    <input type="hidden" name="headWaiterId" value="@headWaiterId.Value" />
                }
                @if (!isAdmin)
                {
                    <div class="col-md-8">
                        <input type="text" name="searchString" class="form-control" placeholder="Search by Order Number or Customer Name..." value="@Context.Request.Query["searchString"]" />
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-outline-primary w-100">Search</button>
                    </div>
                    <div class="col-md-2">
                        <a asp-action="Index" class="btn btn-outline-secondary w-100">Clear</a>
                    </div>
                }
            </form>
        </div>
    </div>

    <div class="card shadow-sm border-0 rounded-4">
        <div class="card-body p-0">
            <table class="table table-hover align-middle mb-0 rounded-4 overflow-hidden" style="font-size: 1.15rem;">
                <thead class="table-light rounded-4">
                    <tr>
                        <th class="fw-bold" style="font-size: 1.2rem;">Name</th>
                        <th class="fw-bold" style="font-size: 1.2rem;">Phone</th>
                        <th class="fw-bold" style="font-size: 1.2rem;">Venue</th>
                        <th class="fw-bold" style="font-size: 1.2rem;">Catering Date</th>
                        <th class="fw-bold" style="font-size: 1.2rem;">Occasion</th>
                        <th class="fw-bold" style="font-size: 1.2rem;">Time of Food Serving</th>
                        <th class="fw-bold" style="font-size: 1.2rem;">Status</th>
                        <th class="text-end fw-bold" style="font-size: 1.2rem;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        var hasPullOut = item.Order != null && item.Order.OrderId != 0 &&
                        (ViewBag.MaterialPullOuts != null && ((IEnumerable<dynamic>)ViewBag.MaterialPullOuts).Any(p => p.OrderId == item.Order.OrderId));
                        var hasReturn = item.Order != null && item.Order.OrderId != 0 &&
                        (ViewBag.MaterialReturns != null && ((IEnumerable<dynamic>)ViewBag.MaterialReturns).Any(r => r.OrderId == item.Order.OrderId));
                        <tr>
                            <td style="font-size: 1.1rem;">@item.Name</td>
                            <td style="font-size: 1.1rem;">@item.ContactNo</td>
                            <td style="font-size: 1.1rem;">@item.Order.Venue</td>
                            <td style="font-size: 1.1rem;">@item.Order.CateringDate.ToShortDateString()</td>
                            <td style="font-size: 1.1rem;">@item.Order.Occasion</td>
                            <td style="font-size: 1.1rem;">@item.Order.timeOfFoodServing.ToShortTimeString()</td>
                            <td style="font-size: 1.1rem;">
                                @{
                                    var order = item.Order;
                                    var dynamicStatus = order?.Status ?? "";
                                    if (order != null)
                                    {
                                        var remainingDict = ViewBag.RemainingBalanceByOrder as System.Collections.Generic.IDictionary<int, double>;
                                        var returnsDict = ViewBag.ReturnsExistByOrder as System.Collections.Generic.IDictionary<int, bool>;
                                        var remaining = remainingDict != null && remainingDict.ContainsKey(order.OrderId)
                                        ? remainingDict[order.OrderId]
                                        : 0d;
                                        var hasReturns = returnsDict != null && returnsDict.ContainsKey(order.OrderId);
                                        // If materials have been returned and there is remaining balance, show Settling Balance
                                        if (remaining > 0 && hasReturns)
                                        {
                                            dynamicStatus = "Settling Balance";
                                        }
                                    }
                                }
                                <span class="badge @(dynamicStatus switch {
                                    "Accepted" => "bg-info",
                                    "Ongoing" => "bg-primary",
                                    "Completed" => "bg-success",
                                    "Settling Balance" => "bg-danger",
                                    _ => "bg-secondary"
                                })">@dynamicStatus</span>
                            </td>
                            <td class="text-end">
                                @if (item.Order?.Status == "Ongoing" && !hasReturn)
                                {
                                    @if (headWaiterId != null)
                                    {
                                        <a asp-controller="PaidOrders" asp-action="DeployWaiter" asp-route-id="@item.CustomerID" asp-route-headWaiterId="@headWaiterId"
                                           class="btn btn-warning action-btn mb-1"><i class="bi bi-person-plus"></i> Deploy Waiter</a>
                                    }
                                    else
                                    {
                                        <a asp-controller="PaidOrders" asp-action="DeployWaiter" asp-route-id="@item.CustomerID"
                                           class="btn btn-warning action-btn mb-1"><i class="bi bi-person-plus"></i> Deploy Waiter</a>
                                    }
                                }
                                else if (item.Order?.Status == "Accepted" && !hasReturn)
                                {
                                    @if (headWaiterId != null)
                                    {
                                        <a asp-controller="PaidOrders" asp-action="DeployWaiter" asp-route-id="@item.CustomerID" asp-route-headWaiterId="@headWaiterId"
                                           class="btn btn-warning action-btn mb-1"><i class="bi bi-person-plus"></i> Deploy Waiter</a>
                                    }
                                    else
                                    {
                                        <a asp-controller="PaidOrders" asp-action="DeployWaiter" asp-route-id="@item.CustomerID"
                                           class="btn btn-warning action-btn mb-1"><i class="bi bi-person-plus"></i> Deploy Waiter</a>
                                    }
                                }
                                @if (item.Order?.Status != "Completed" && !hasReturn)
                                {
                                    <a asp-action="PullOutMaterials" asp-route-id="@item.CustomerID" class="btn btn-outline-primary action-btn mb-1" style="border: 2px solid;"><i class="bi bi-box-arrow-up"></i> Pull Out Materials</a>
                                    @if (hasPullOut && !hasReturn)
                                    {
                                        <a asp-action="ReturnMaterials" asp-route-id="@item.CustomerID" class="btn btn-outline-warning action-btn mb-1" style="border: 2px solid;"><i class="bi bi-arrow-counterclockwise"></i> Return Materials</a>
                                    }
                                }
                                @if (headWaiterId != null)
                                {
                                    <a asp-action="Details" asp-route-id="@item.CustomerID" asp-route-headWaiterId="@headWaiterId"
                                       class="btn btn-info action-btn mb-1"><i class="bi bi-info-circle"></i> Details</a>
                                }
                                else
                                {
                                    <a asp-action="Details" asp-route-id="@item.CustomerID"
                                       class="btn btn-info action-btn mb-1"><i class="bi bi-info-circle"></i> Details</a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Profile Modal -->
<div class="modal fade" id="profileModal" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="profileModalLabel">Update Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="profileForm" method="post" asp-controller="PaidOrders" asp-action="UpdateProfile">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="profileForm" class="btn btn-primary">Update Profile</button>
            </div>
        </div>
    </div>
</div>

<script>
    function openProfileModal() {
        const modal = new bootstrap.Modal(document.getElementById('profileModal'));
        modal.show();
    }

    // Form validation
    document.getElementById('profileForm').addEventListener('submit', function (e) {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (newPassword !== confirmPassword) {
            e.preventDefault();
            alert('New password and confirm password do not match!');
            return false;
        }

        if (newPassword.length < 6) {
            e.preventDefault();
            alert('Password must be at least 6 characters long!');
            return false;
        }
    });
</script>
