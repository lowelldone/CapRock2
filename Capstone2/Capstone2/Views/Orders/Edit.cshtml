@model Capstone2.Models.Order
@{
    ViewData["Title"] = "Edit Order Information";
}

<style>
    body, .container, .card, .btn, h1, h2, h3, h4, h5, h6, p, label, input, textarea, select {
        font-family: 'Segoe UI', sans-serif;
    }

    .edit-bg {
        background: linear-gradient(135deg, #f8fafc 60%, #e0e7ef 100%);
        min-height: 100vh;
        border-radius: 24px;
        padding-bottom: 2rem;
    }

    .edit-header {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .edit-header-icon {
        font-size: 2.5rem;
        color: #0d6efd;
        background: #e0f2fe;
        border-radius: 12px;
        padding: 8px 14px;
        box-shadow: 0 2px 8px rgba(13,110,253,0.08);
    }

    .edit-subtitle {
        color: #6c757d;
        font-size: 1.1rem;
        margin-top: -8px;
        margin-bottom: 18px;
    }

    .edit-card {
        background: #fff;
        border-radius: 20px;
        box-shadow: 0 4px 24px 0 rgba(34, 41, 47, 0.08);
        padding: 2rem;
    }

    .form-control {
        border-radius: 12px;
        border: 1px solid #e0e7ef;
        padding: 0.75rem 1rem;
        font-size: 1rem;
    }

        .form-control:focus {
            border-color: #6476f8;
            box-shadow: 0 0 0 0.2rem rgba(100, 118, 248, 0.25);
        }

    .btn-save {
        font-weight: 600;
        font-size: 1.1rem;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        box-shadow: 0 2px 8px 0 rgba(100, 118, 248, 0.10);
    }

    .btn-cancel {
        font-weight: 500;
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }
</style>

<div class="container-fluid mt-4 px-4 edit-bg">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
            <div class="edit-header mb-1">
                <span class="edit-header-icon"><i class="bi bi-pencil-square"></i></span>
                <h2 class="fw-bold mb-0">Edit Order Information</h2>
            </div>
            <div class="edit-subtitle">Update order details for @Model.Customer.Name</div>
        </div>
    </div>

    <div class="edit-card">
        <form asp-action="Edit" asp-route-id="@Model.OrderId" method="post">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="OrderId" />
            <input type="hidden" asp-for="Status" />
            <input type="hidden" asp-for="OrderDate" />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Customer.Name" class="form-label fw-semibold">Customer Name</label>
                    <input asp-for="Customer.Name" class="form-control" placeholder="Enter customer name" />
                    <span asp-validation-for="Customer.Name" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Customer.ContactNo" class="form-label fw-semibold">Contact Number</label>
                    <input asp-for="Customer.ContactNo" class="form-control" placeholder="Enter contact number" />
                    <span asp-validation-for="Customer.ContactNo" class="text-danger"></span>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Customer.Address" class="form-label fw-semibold">Address</label>
                <input asp-for="Customer.Address" class="form-control" placeholder="Enter address" />
                <span asp-validation-for="Customer.Address" class="text-danger"></span>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Venue" class="form-label fw-semibold">Venue</label>
                    <input asp-for="Venue" class="form-control" placeholder="Enter venue" />
                    <span asp-validation-for="Venue" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="CateringDate" class="form-label fw-semibold">Catering Date</label>
                    <input asp-for="CateringDate" type="date" class="form-control" id="cateringDate" />
                    <span asp-validation-for="CateringDate" class="text-danger"></span>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="timeOfFoodServing" class="form-label fw-semibold">Time of Food Serving</label>
                    <input asp-for="timeOfFoodServing" type="time" class="form-control" id="timeOfFoodServing" />
                    <span asp-validation-for="timeOfFoodServing" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Occasion" class="form-label fw-semibold">Occasion</label>
                    <input asp-for="Occasion" class="form-control" placeholder="Enter occasion" />
                    <span asp-validation-for="Occasion" class="text-danger"></span>
                </div>
            </div>

            <!-- Rush Order Fee Alert (hidden by default) -->
            <div id="rushOrderAlert" class="alert alert-warning mb-4" style="display: none;">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Rush Order Fee:</strong> Since your catering date is the same as your order date, a <strong>10% rush order fee</strong> has been added to your total amount.
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="NoOfPax" class="form-label fw-semibold">No. Of Pax</label>
                    <input asp-for="NoOfPax" type="number" class="form-control" id="noOfPax" min="@ViewBag.PackageMinPax" />
                    <span asp-validation-for="NoOfPax" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Motif" class="form-label fw-semibold">Motif</label>
                    <input asp-for="Motif" class="form-control" placeholder="Enter motif" />
                    <span asp-validation-for="Motif" class="text-danger"></span>
                </div>
            </div>

            <div class="d-flex gap-3">
                <button type="submit" class="btn btn-primary btn-save">
                    <i class="bi bi-check-lg me-2"></i>Save Changes
                </button>
                <a asp-controller="Customers" asp-action="ViewOrder" asp-route-id="@Model.CustomerID" class="btn btn-outline-secondary btn-cancel">
                    <i class="bi bi-x-lg me-2"></i>Cancel
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Manila timezone helpers
        function formatManilaDateYYYYMMDD(date) {
            try {
                const parts = new Intl.DateTimeFormat('en-CA', {
                    timeZone: 'Asia/Manila', year: 'numeric', month: '2-digit', day: '2-digit'
                }).formatToParts(date);
                const y = parts.find(p => p.type === 'year').value;
                const m = parts.find(p => p.type === 'month').value;
                const d = parts.find(p => p.type === 'day').value;
                return `${y}-${m}-${d}`;
            } catch (e) {
                const y = date.getFullYear();
                const m = String(date.getMonth() + 1).padStart(2, '0');
                const d = String(date.getDate()).padStart(2, '0');
                return `${y}-${m}-${d}`;
            }
        }
        function getManilaNowParts() {
            try {
                const parts = new Intl.DateTimeFormat('en-GB', {
                    timeZone: 'Asia/Manila', year: 'numeric', month: '2-digit', day: '2-digit',
                    hour: '2-digit', minute: '2-digit', hour12: false
                }).formatToParts(new Date());
                const pick = (t) => parts.find(p => p.type === t).value;
                return {
                    y: pick('year'), m: pick('month'), d: pick('day'),
                    h: parseInt(pick('hour'), 10), min: parseInt(pick('minute'), 10)
                };
            } catch (e) {
                const now = new Date();
                return { y: String(now.getFullYear()), m: String(now.getMonth() + 1).padStart(2, '0'), d: String(now.getDate()).padStart(2, '0'), h: now.getHours(), min: now.getMinutes() };
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const cateringDateInput = document.getElementById('cateringDate');
            const timeOfFoodServingInput = document.getElementById('timeOfFoodServing');
            const noOfPaxInput = document.getElementById('noOfPax');
            const rushOrderAlert = document.getElementById('rushOrderAlert');
            const submitBtn = document.querySelector('button[type="submit"]');

            // Min date using Manila time
            const todayPH = formatManilaDateYYYYMMDD(new Date());
            cateringDateInput.setAttribute('min', todayPH);

            // Ensure time has a sensible default (current Manila time) if blank
            if (timeOfFoodServingInput && !timeOfFoodServingInput.value) {
                const now = getManilaNowParts();
                timeOfFoodServingInput.value = `${String(now.h).padStart(2, '0')}:${String(now.min).padStart(2, '0')}`;
            }

            // NoOfPax client validation matching create form
            if (noOfPaxInput) {
                // Get package minimum pax from server-side data
                const packageMinPax = @ViewBag.PackageMinPax;

                noOfPaxInput.addEventListener('focus', function () {
                    if (this.value === '0' || this.value === '') {
                        this.value = '';
                    }
                });
                noOfPaxInput.addEventListener('input', function () {
                    if (this.value === '0') {
                        this.value = '';
                    }
                });
                noOfPaxInput.addEventListener('blur', function () {
                    if (this.value === '' || this.value === '0' || parseInt(this.value) < packageMinPax) {
                        this.setCustomValidity(`Please enter a valid number of people (minimum ${packageMinPax})`);
                    }
                    else if (this.value === '' || this.value === '0' || parseInt(this.value) > 1500) {
                        this.setCustomValidity('Please enter a valid number of people (maximum 1500)');
                    }
                    else {
                        this.setCustomValidity('');
                    }
                });
            }

            function formatTime(h, m) {
                return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
            }

            function applyRushOrderRules() {
                const manilaNow = getManilaNowParts();
                const todayPHStr = `${manilaNow.y}-${manilaNow.m}-${manilaNow.d}`;
                const isSameDay = (cateringDateInput.value && cateringDateInput.value === todayPHStr);

                if (isSameDay) {
                    const isAM = manilaNow.h < 12;
                    if (!isAM) {
                        rushOrderAlert.innerHTML = '<i class="bi bi-exclamation-triangle me-2"></i><strong>Rush Order Restriction:</strong> Rush order is only available during AM. Please select a future date for your catering order.';
                        rushOrderAlert.className = 'alert alert-danger mb-4';
                        rushOrderAlert.style.display = 'block';
                        if (submitBtn) {
                            submitBtn.disabled = true;
                            submitBtn.innerHTML = '<i class="bi bi-x-circle me-2"></i>Order Restricted';
                        }
                        if (timeOfFoodServingInput) {
                            timeOfFoodServingInput.removeAttribute('min');
                        }
                        return;
                    }

                    const hourPlusTen = manilaNow.h + 10;
                    if (hourPlusTen >= 24) {
                        rushOrderAlert.innerHTML = '<i class="bi bi-exclamation-triangle me-2"></i><strong>10 hours preparation if rush order.</strong> No available time slots remain today. Please select a later date.';
                        rushOrderAlert.className = 'alert alert-danger mb-4';
                        rushOrderAlert.style.display = 'block';
                        if (submitBtn) {
                            submitBtn.disabled = true;
                            submitBtn.innerHTML = '<i class="bi bi-x-circle me-2"></i>Order Restricted';
                        }
                        if (timeOfFoodServingInput) {
                            timeOfFoodServingInput.removeAttribute('min');
                        }
                        return;
                    }

                    const minTime = formatTime(hourPlusTen, manilaNow.min);
                    if (timeOfFoodServingInput) {
                        timeOfFoodServingInput.setAttribute('min', minTime);
                        if (!timeOfFoodServingInput.value || timeOfFoodServingInput.value < minTime) {
                            timeOfFoodServingInput.value = minTime;
                        }
                    }

                    rushOrderAlert.innerHTML = '<i class="bi bi-exclamation-triangle me-2"></i><strong>10 hours preparation if rush order.</strong> Since your catering date is the same as your order date, a <strong>10% rush order fee</strong> has been added to your total amount.';
                    rushOrderAlert.className = 'alert alert-warning mb-4';
                    rushOrderAlert.style.display = 'block';
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i class="bi bi-check-lg me-2"></i>Save Changes';
                    }
                } else {
                    rushOrderAlert.style.display = 'none';
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i class="bi bi-check-lg me-2"></i>Save Changes';
                    }
                    if (timeOfFoodServingInput) {
                        timeOfFoodServingInput.removeAttribute('min');
                    }
                }
            }

            // Initial and reactive checks
            applyRushOrderRules();
            cateringDateInput.addEventListener('change', applyRushOrderRules);
        });
    </script>
}