@model Capstone2.Models.Order

@{
    ViewData["Title"] = "Place Order";
}

<style>
    body, .container, .card, .btn, h1, h2, h3, h4, h5, h6, p, label, input, textarea, select {
        font-family: 'Segoe UI', sans-serif;
    }

    .form-bg {
        background: linear-gradient(135deg, #f8fafc 60%, #e0e7ef 100%);
        min-height: 100vh;
        border-radius: 24px;
        padding-bottom: 2rem;
    }

    .form-header {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .form-header-icon {
        font-size: 2.5rem;
        color: #0d6efd;
        background: #e0f2fe;
        border-radius: 12px;
        padding: 8px 14px;
        box-shadow: 0 2px 8px rgba(13,110,253,0.08);
    }

    .form-subtitle {
        color: #6c757d;
        font-size: 1.1rem;
        margin-top: -8px;
        margin-bottom: 18px;
    }

    .form-card {
        background: #fff;
        border-radius: 20px;
        box-shadow: 0 4px 24px 0 rgba(34, 41, 47, 0.08);
        padding: 2rem;
    }

    .form-control {
        border-radius: 12px;
        border: 1px solid #e0e7ef;
        padding: 0.75rem 1rem;
        font-size: 1rem;
    }

        .form-control:focus {
            border-color: #6476f8;
            box-shadow: 0 0 0 0.2rem rgba(100, 118, 248, 0.25);
        }

    .btn-back {
        font-weight: 500;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        position: absolute;
        left: 2rem;
        top: 2rem;
        z-index: 1000;
    }

    .btn-submit {
        font-weight: 600;
        font-size: 1.1rem;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        box-shadow: 0 2px 8px 0 rgba(100, 118, 248, 0.10);
    }

    .alert {
        border-radius: 12px;
        border: none;
    }

    .alert-info {
        background: #dbeafe;
        color: #1e40af;
    }
    .btn-back{
        position: absolute;
        left: 5px;
    }
</style>

<div class="container-fluid mt-4 px-4 form-bg">
    <button type="button" class="btn btn-outline-secondary mt-5 btn-back" onclick="window.history.back();">
        <i class="bi bi-arrow-left me-2"></i>Back
    </button>

    <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
            <div class="form-header mb-1">
                <span class="form-header-icon"><i class="bi bi-cart-plus"></i></span>
                <h2 class="fw-bold mb-0">Place an Order</h2>
            </div>
            <div class="form-subtitle">Complete your catering order details.</div>
        </div>
    </div>

    <div class="form-card">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <form asp-action="Form" asp-controller="Orders" method="post" id="orderForm">
            <input type="hidden" name="OrderItemsJson" value="@TempData["OrderItemsJson"]" />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Customer.Name" class="form-label fw-semibold">Customer Name</label>
                    <input asp-for="Customer.Name" class="form-control" placeholder="Enter customer name" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Customer.ContactNo" class="form-label fw-semibold">Contact No.</label>
                    <input asp-for="Customer.ContactNo" class="form-control" placeholder="Enter contact number" required />
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Customer.Address" class="form-label fw-semibold">Address</label>
                <input asp-for="Customer.Address" class="form-control" placeholder="Enter address" required />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="CateringDate" class="form-label fw-semibold">Catering Date</label>
                    <input asp-for="CateringDate" type="date" class="form-control" id="cateringDate" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Venue" class="form-label fw-semibold">Venue</label>
                    <input asp-for="Venue" class="form-control" placeholder="Enter venue" required />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="NoOfPax" class="form-label fw-semibold">Number of PAX</label>
                    <input asp-for="NoOfPax" type="number" class="form-control" id="noOfPax" placeholder="Enter number of people" min="1" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="timeOfFoodServing" class="form-label fw-semibold">Time of Food Serving</label>
                    <input asp-for="timeOfFoodServing" type="time" class="form-control" required />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Occasion" class="form-label fw-semibold">Occasion</label>
                    <input asp-for="Occasion" class="form-control" placeholder="Enter occasion" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Motif" class="form-label fw-semibold">Motif</label>
                    <input asp-for="Motif" class="form-control" placeholder="Enter motif" required />
                </div>
            </div>

            <div class="mb-4">
                <label asp-for="TotalPayment" class="form-label fw-semibold">Total Payment</label>
                <input asp-for="TotalPayment" value="@Model.TotalPayment.ToString("0.00")" step="0.01" class="form-control" readonly />
            </div>

            <!-- Rush Order Fee Alert (hidden by default) -->
            <div id="rushOrderAlert" class="alert alert-warning mb-4" style="display: none;">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Rush Order Fee:</strong> Since your catering date is the same as your order date, a <strong>10% rush order fee</strong> has been added to your total amount.
            </div>

            <div class="alert alert-info mb-4">
                <i class="bi bi-info-circle me-2"></i>
                <strong>Reminder:</strong> You need to pay at least a <strong>50% down payment</strong> for your catering order to proceed.
            </div>

            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary btn-submit">
                    <i class="bi bi-check-lg me-2"></i>Place Order
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    const STORAGE_KEY = 'orderFormData';

    // On page load: restore if there is saved data
    window.addEventListener('DOMContentLoaded', function () {
        const saved = sessionStorage.getItem(STORAGE_KEY);
        if (saved) {
            const data = JSON.parse(saved);
            Object.keys(data).forEach(function (key) {
                const el = document.querySelector('[name="' + key + '"]');
                console.log(el);
                if (el && (!el.value || parseInt(el.value) == 0)) {
                    el.value = data[key];
                }
            });
        }

        // Set minimum date for catering date input
        const cateringDateInput = document.getElementById('cateringDate');
        const today = new Date().toISOString().split('T')[0];
        cateringDateInput.setAttribute('min', today);

        // Handle Number of PAX input
        const noOfPaxInput = document.getElementById('noOfPax');

        // Clear the input when focused if it's 0
        noOfPaxInput.addEventListener('focus', function () {
            if (this.value === '0' || this.value === '') {
                this.value = '';
            }
        });

        // Prevent 0 as input and set minimum value
        noOfPaxInput.addEventListener('input', function () {
            if (this.value === '0') {
                this.value = '';
            }
        });

        // Validate on blur - if empty or 0, show error
        noOfPaxInput.addEventListener('blur', function () {
            if (this.value === '' || this.value === '0' || parseInt(this.value) < 60) {
                this.setCustomValidity('Please enter a valid number of people (minimum 60)');
            }
            else if (this.value === '' || this.value === '0' || parseInt(this.value) > 1500) {
                this.setCustomValidity('Please enter a valid number of people (maximum 1500)');
            }
            else {
                this.setCustomValidity('');
            }
        });

        // Handle rush order fee display
        // const cateringDateInput = document.getElementById('cateringDate');
        const rushOrderAlert = document.getElementById('rushOrderAlert');

        function checkRushOrder() {
            const cateringDate = new Date(cateringDateInput.value);
            const today = new Date();

            if (cateringDateInput.value &&
                cateringDate.getDate() === today.getDate() &&
                cateringDate.getMonth() === today.getMonth() &&
                cateringDate.getFullYear() === today.getFullYear()) {
                rushOrderAlert.style.display = 'block';
            } else {
                rushOrderAlert.style.display = 'none';
            }
        }

        // Check on page load
        checkRushOrder();

        // Check when catering date changes
        cateringDateInput.addEventListener('change', checkRushOrder);
    });

    // On submit: only save if it’s new or changed
    document.getElementById('orderForm').addEventListener('submit', function (e) {
        const form = this;
        const formData = { };
        Array.from(form.elements).forEach(el => {
            if (el.name && el.type !== 'submit' && el.type !== 'button') {
                formData[el.name] = el.value;
            }
        });

        const newJson = JSON.stringify(formData);
        const oldJson = sessionStorage.getItem(STORAGE_KEY);

        if (!oldJson || oldJson !== newJson) {
            // only write if it’s missing or has changed
            sessionStorage.setItem(STORAGE_KEY, newJson);
        }
    });

    // Clear sessionStorage after successful submit (optional, if you redirect on success)
    // You may want to clear it on the OrderDetails page after confirmation as well.
</script>
